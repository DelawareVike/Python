{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python Crash Course, Third Edition This is a collection of resources for Python Crash Course (3rd Ed.) , an introductory programming book from No Starch Press by Eric Matthes. The simplest way to download the source code files for the book is to click on the Download .zip button below. This will download the source code files for all chapters, as well as a number of data files and images you'll need for the projects. Download .zip View on GitHub The full set of resources for the third edition is still being developed. If you are an early reader of the third edition, some of the second edition's resources may still be useful, such as the Cheat Sheets and articles such as Finding Employment . If you have any questions about Python Crash Course, feel free to get in touch: Email: ehmatthes@gmail.com Twitter: @ehmatthes Mastodon: @ehmatthes@fosstodon.org Available from No Starch Press , Amazon , and Barnes & Noble . You can also find Python Crash Course in person at Barnes & Noble bookstores, and other fine booksellers worldwide.","title":"Home"},{"location":"#python-crash-course-third-edition","text":"This is a collection of resources for Python Crash Course (3rd Ed.) , an introductory programming book from No Starch Press by Eric Matthes. The simplest way to download the source code files for the book is to click on the Download .zip button below. This will download the source code files for all chapters, as well as a number of data files and images you'll need for the projects. Download .zip View on GitHub The full set of resources for the third edition is still being developed. If you are an early reader of the third edition, some of the second edition's resources may still be useful, such as the Cheat Sheets and articles such as Finding Employment . If you have any questions about Python Crash Course, feel free to get in touch: Email: ehmatthes@gmail.com Twitter: @ehmatthes Mastodon: @ehmatthes@fosstodon.org Available from No Starch Press , Amazon , and Barnes & Noble . You can also find Python Crash Course in person at Barnes & Noble bookstores, and other fine booksellers worldwide.","title":"Python Crash Course, Third Edition"},{"location":"contact/","text":"Contact If you have any questions about Python Crash Course, or any feedback about what you see here, please feel free to get in touch: Email: ehmatthes@gmail.com Twitter: @ehmatthes Mastodon: @ehmatthes@fosstodon.org","title":"Contact"},{"location":"contact/#contact","text":"If you have any questions about Python Crash Course, or any feedback about what you see here, please feel free to get in touch: Email: ehmatthes@gmail.com Twitter: @ehmatthes Mastodon: @ehmatthes@fosstodon.org","title":"Contact"},{"location":"new_in_3e/","text":"What's new in the third edition? Python is a mature language, but like every programming language it continues to evolve. The third edition incorporates the most important new features in Python, without becoming bloated by trying to include every new feature that's been introduced in recent years. The new edition uses the latest versions of all third-party libraries in the projects section. Overall changes Here's a summary of the changes that have been made to the book overall: The third edition uses Python 3.11. (The second edition was written using Python 3.7.) The new edition uses VS Code instead of Sublime Text. VS Code is fully open, and has seen widespread adoption in the Python world over the last several years. Code listings are less cluttered and easier to follow throughout the book. The new edition uses updated libraries throughout, and updated workflows for each library. Specific changes Chapter 1 In the setup section, VS Code is recommended as a text editor for readers who don't already have a preference. (You can use any editor that's properly configured to run Python code.) Chapter 2 This chapter introduces removeprefix() and removesuffix() , two new methods that are helpful when working with files and URLs. Chapter 2 also includes Python's newly-improved error messages, which provide much more specific information to help you troubleshoot your code when something goes wrong. Chapters 3-9 Many explanations have been clarified, and code listings have been simplified. (There were some annotations in shorter listings that weren't really necessary.) Chapter 10 Chapter 10 uses the pathlib module for working with files. This is a much simpler approach to reading from and writing to files. It's also in keeping with how most major libraries are working with files now. Chapter 11 pytest is now the main testing library in the Python world. It's accessible to beginners, but powerful enough to serve professional testing needs as well. Chapter 11 now uses pytest instead of the standard library's unittest . This chapter shows how to install third-party libraries, instead of introducing the topic in several different projects in the second half of the book. Alien Invasion (Chapters 12-14) The game uses an FPS (frames per second) setting, to make it run more consistently across all systems. The approach to building the alien fleet is simpler and easier to understand. The code listings throughout the project are presented in an order that's easier to follow. Data Visualization (Chapters 15-17) Matplotlib has changed some of its default style settings; all figures in the new edition match the current default styles. Plotly has introduced Plotly Express, a module that focuses on building an initial plot quickly, and then making styling choices. The third edition uses this new approach. The random walk project has a small improvement that increases the accuracy of the plots; you'll see a wider variety of patterns emerge each time you generate a new walk. The weather and earthquake projects use updated data sets. The GitHub data used in Chapter 17 is fully updated. Web Applications (Chapters 18-20) The Learning Log project is built using Django 4.1, and the project is styled using Bootstrap 5. Some parts of the project have been renamed to make it easier to understand the overall layout of a Django project. The deployment section has been updated. The project is now deployed to Platform.sh, a modern hosting service for Django projects. The deployment process is controlled by YAML configuration files, which give you a great deal of control over how your project is deployed. This approach is consistent with how professional programmers deploy modern Django projects. Appendices Appendix A includes updated supplementary installation and setup instructions, for readers who run into any issues installing Python. Appendix B discusses customizations you can make to VS Code to make it more useful for writing and maintaining Python code. It also includes a number of shortcuts you can use to work more efficiently in VS Code. Appendix C includes an updated set of resources for getting help online. Appendix D uses the new git restore command for rolling back changes in a project, and the git switch command for getting back to the main branch in a project. Appendix E, which is entirely new, expands on the deployment process for web applications. Deployment is a complex process when it doesn't go perfectly. This appendix provides some guidance on how to troubleshoot deployments when they don't work the first time you try them. Index The new edition has been entirely re-indexed, to help you find what you need quickly after you've worked through the book.","title":"What's new?"},{"location":"new_in_3e/#whats-new-in-the-third-edition","text":"Python is a mature language, but like every programming language it continues to evolve. The third edition incorporates the most important new features in Python, without becoming bloated by trying to include every new feature that's been introduced in recent years. The new edition uses the latest versions of all third-party libraries in the projects section.","title":"What's new in the third edition?"},{"location":"new_in_3e/#overall-changes","text":"Here's a summary of the changes that have been made to the book overall: The third edition uses Python 3.11. (The second edition was written using Python 3.7.) The new edition uses VS Code instead of Sublime Text. VS Code is fully open, and has seen widespread adoption in the Python world over the last several years. Code listings are less cluttered and easier to follow throughout the book. The new edition uses updated libraries throughout, and updated workflows for each library.","title":"Overall changes"},{"location":"new_in_3e/#specific-changes","text":"","title":"Specific changes"},{"location":"new_in_3e/#chapter-1","text":"In the setup section, VS Code is recommended as a text editor for readers who don't already have a preference. (You can use any editor that's properly configured to run Python code.)","title":"Chapter 1"},{"location":"new_in_3e/#chapter-2","text":"This chapter introduces removeprefix() and removesuffix() , two new methods that are helpful when working with files and URLs. Chapter 2 also includes Python's newly-improved error messages, which provide much more specific information to help you troubleshoot your code when something goes wrong.","title":"Chapter 2"},{"location":"new_in_3e/#chapters-3-9","text":"Many explanations have been clarified, and code listings have been simplified. (There were some annotations in shorter listings that weren't really necessary.)","title":"Chapters 3-9"},{"location":"new_in_3e/#chapter-10","text":"Chapter 10 uses the pathlib module for working with files. This is a much simpler approach to reading from and writing to files. It's also in keeping with how most major libraries are working with files now.","title":"Chapter 10"},{"location":"new_in_3e/#chapter-11","text":"pytest is now the main testing library in the Python world. It's accessible to beginners, but powerful enough to serve professional testing needs as well. Chapter 11 now uses pytest instead of the standard library's unittest . This chapter shows how to install third-party libraries, instead of introducing the topic in several different projects in the second half of the book.","title":"Chapter 11"},{"location":"new_in_3e/#alien-invasion-chapters-12-14","text":"The game uses an FPS (frames per second) setting, to make it run more consistently across all systems. The approach to building the alien fleet is simpler and easier to understand. The code listings throughout the project are presented in an order that's easier to follow.","title":"Alien Invasion (Chapters 12-14)"},{"location":"new_in_3e/#data-visualization-chapters-15-17","text":"Matplotlib has changed some of its default style settings; all figures in the new edition match the current default styles. Plotly has introduced Plotly Express, a module that focuses on building an initial plot quickly, and then making styling choices. The third edition uses this new approach. The random walk project has a small improvement that increases the accuracy of the plots; you'll see a wider variety of patterns emerge each time you generate a new walk. The weather and earthquake projects use updated data sets. The GitHub data used in Chapter 17 is fully updated.","title":"Data Visualization (Chapters 15-17)"},{"location":"new_in_3e/#web-applications-chapters-18-20","text":"The Learning Log project is built using Django 4.1, and the project is styled using Bootstrap 5. Some parts of the project have been renamed to make it easier to understand the overall layout of a Django project. The deployment section has been updated. The project is now deployed to Platform.sh, a modern hosting service for Django projects. The deployment process is controlled by YAML configuration files, which give you a great deal of control over how your project is deployed. This approach is consistent with how professional programmers deploy modern Django projects.","title":"Web Applications (Chapters 18-20)"},{"location":"new_in_3e/#appendices","text":"Appendix A includes updated supplementary installation and setup instructions, for readers who run into any issues installing Python. Appendix B discusses customizations you can make to VS Code to make it more useful for writing and maintaining Python code. It also includes a number of shortcuts you can use to work more efficiently in VS Code. Appendix C includes an updated set of resources for getting help online. Appendix D uses the new git restore command for rolling back changes in a project, and the git switch command for getting back to the main branch in a project. Appendix E, which is entirely new, expands on the deployment process for web applications. Deployment is a complex process when it doesn't go perfectly. This appendix provides some guidance on how to troubleshoot deployments when they don't work the first time you try them.","title":"Appendices"},{"location":"new_in_3e/#index","text":"The new edition has been entirely re-indexed, to help you find what you need quickly after you've worked through the book.","title":"Index"},{"location":"solutions/","text":"Solutions Solutions for selected exercises from each chapter can be found below. Be careful about looking at the solutions too quickly; make sure you've given yourself time to wrestle with the concepts you just learned before looking at a solution. Also, there are several ways to solve many of the exercises, and the solutions only show one possible way to complete each exercise. I haven't included solutions for Chapters 18-20, because the exercises for those chapters are really projects in themselves. If you're having trouble with an exercise from one of those chapters consider posting on Stack Overflow , r/learnpython , or get in touch. Chapter 2 Chapter 3 Chapter 4 Questions and Feedback If you're stuck on something and what you see here isn't helping, please feel free to get in touch. Also, if you think you've found a mistake in the book or in the online resources, I'd love to know about it! Email: ehmatthes@gmail.com Twitter: @ehmatthes Mastodon: @ehmatthes@fosstodon.org","title":"Solutions"},{"location":"solutions/#solutions","text":"Solutions for selected exercises from each chapter can be found below. Be careful about looking at the solutions too quickly; make sure you've given yourself time to wrestle with the concepts you just learned before looking at a solution. Also, there are several ways to solve many of the exercises, and the solutions only show one possible way to complete each exercise. I haven't included solutions for Chapters 18-20, because the exercises for those chapters are really projects in themselves. If you're having trouble with an exercise from one of those chapters consider posting on Stack Overflow , r/learnpython , or get in touch. Chapter 2 Chapter 3 Chapter 4","title":"Solutions"},{"location":"solutions/#questions-and-feedback","text":"If you're stuck on something and what you see here isn't helping, please feel free to get in touch. Also, if you think you've found a mistake in the book or in the online resources, I'd love to know about it! Email: ehmatthes@gmail.com Twitter: @ehmatthes Mastodon: @ehmatthes@fosstodon.org","title":"Questions and Feedback"},{"location":"solutions/chapter_2/","text":"Solutions - Chapter 2 Back to solutions . 2-1: Simple Message Assign a message to a variable, and then print that message. simple_message.py msg = \"I love learning to use Python.\" print ( msg ) Output: I love learning to use Python. 2-2: Simple Messages Assign a message to a variable, and print that message. Then change the value of the variable to a new message, and print the new message. simple_messages.py msg = \"I love learning to use Python.\" print ( msg ) msg = \"It's really satisfying!\" print ( msg ) Output: I love learning to use Python. It's really satisfying! 2-3: Personal Message Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d personal_message.py name = \"eric\" msg = f \"Hello { name . title () } , would you like to learn some Python today?\" print ( msg ) Output: Hello Eric, would you like to learn some Python today? 2-4: Name Cases Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case. name_cases.py name = \"eric\" print ( name . lower ()) print ( name . upper ()) print ( name . title ()) Output: eric ERIC Eric 2-5: Famous Quote Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks: Albert Einstein once said, \"A person who never made a mistake never tried anything new.\" famous_quote.py print ( 'Albert Einstein once said, \"A person who never made a mistake' ) print ( 'never tried anything new.\"' ) Output: Albert Einstein once said, \"A person who never made a mistake never tried anything new.\" 2-6: Famous Quote 2 Repeat Exercise 2-5, but this time, represent the famous person\u2019s name using a variable called famous_person . Then compose your message and represent it with a new variable called message . Print your message. famous_quote_2.py famous_person = \"Albert Einstein\" message = f ' { famous_person } once said, \"A person who never made a mistake never tried anything new.\"' print ( message ) Output: Albert Einstein once said, \"A person who never made a mistake never tried anything new.\" Note The line that defines message in this file is longer than we'd typically like to write. You'll see this a little later in Chapter 7, but you can add to a string using the += operator. So this program could also be written like this, with exactly the same output: famous_quote_3.py famous_person = \"Albert Einstein\" message = f ' { famous_person } once said, \"A person who never made a mistake' message += ' never tried anything new.\"' print ( message ) 2-7: Stripping Names Use a variable to represent a person's name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\" , at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip() , rstrip() , and strip() . stripping_names.py name = \" \\t Eric Matthes \\n \" print ( \"Unmodified:\" ) print ( name ) print ( \" \\n Using lstrip():\" ) print ( name . lstrip ()) print ( \" \\n Using rstrip():\" ) print ( name . rstrip ()) print ( \" \\n Using strip():\" ) print ( name . strip ()) Output: Unmodified: Eric Matthes Using lstrip(): Eric Matthes Using rstrip(): Eric Matthes Using strip(): Eric Matthes 2-8: File Extensions Python has a removesuffix() method that works exactly like removeprefix() . Assign the value 'python_notes.txt' to a variable called filename . Then use the removesuffix() method to display the filename without the file extension, like some file browsers do. file_extensions.py filename = 'python_notes.txt' simple_filename = filename . removesuffix ( '.txt' ) print ( simple_filename ) Output: python_notes 2-10: Favorite Number Use a variable to represent your favorite number. Then, using that variable, create a message that reveals your favorite number. Print that message. favorite_number.py fav_num = 42 msg = f \"My favorite number is { fav_num } .\" print ( msg ) Output: My favorite number is 42.","title":"Chapter 2"},{"location":"solutions/chapter_2/#solutions-chapter-2","text":"Back to solutions .","title":"Solutions - Chapter 2"},{"location":"solutions/chapter_2/#2-1-simple-message","text":"Assign a message to a variable, and then print that message. simple_message.py msg = \"I love learning to use Python.\" print ( msg ) Output: I love learning to use Python.","title":"2-1: Simple Message"},{"location":"solutions/chapter_2/#2-2-simple-messages","text":"Assign a message to a variable, and print that message. Then change the value of the variable to a new message, and print the new message. simple_messages.py msg = \"I love learning to use Python.\" print ( msg ) msg = \"It's really satisfying!\" print ( msg ) Output: I love learning to use Python. It's really satisfying!","title":"2-2: Simple Messages"},{"location":"solutions/chapter_2/#2-3-personal-message","text":"Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d personal_message.py name = \"eric\" msg = f \"Hello { name . title () } , would you like to learn some Python today?\" print ( msg ) Output: Hello Eric, would you like to learn some Python today?","title":"2-3: Personal Message"},{"location":"solutions/chapter_2/#2-4-name-cases","text":"Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case. name_cases.py name = \"eric\" print ( name . lower ()) print ( name . upper ()) print ( name . title ()) Output: eric ERIC Eric","title":"2-4: Name Cases"},{"location":"solutions/chapter_2/#2-5-famous-quote","text":"Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks: Albert Einstein once said, \"A person who never made a mistake never tried anything new.\" famous_quote.py print ( 'Albert Einstein once said, \"A person who never made a mistake' ) print ( 'never tried anything new.\"' ) Output: Albert Einstein once said, \"A person who never made a mistake never tried anything new.\"","title":"2-5: Famous Quote"},{"location":"solutions/chapter_2/#2-6-famous-quote-2","text":"Repeat Exercise 2-5, but this time, represent the famous person\u2019s name using a variable called famous_person . Then compose your message and represent it with a new variable called message . Print your message. famous_quote_2.py famous_person = \"Albert Einstein\" message = f ' { famous_person } once said, \"A person who never made a mistake never tried anything new.\"' print ( message ) Output: Albert Einstein once said, \"A person who never made a mistake never tried anything new.\" Note The line that defines message in this file is longer than we'd typically like to write. You'll see this a little later in Chapter 7, but you can add to a string using the += operator. So this program could also be written like this, with exactly the same output: famous_quote_3.py famous_person = \"Albert Einstein\" message = f ' { famous_person } once said, \"A person who never made a mistake' message += ' never tried anything new.\"' print ( message )","title":"2-6: Famous Quote 2"},{"location":"solutions/chapter_2/#2-7-stripping-names","text":"Use a variable to represent a person's name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\" , at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip() , rstrip() , and strip() . stripping_names.py name = \" \\t Eric Matthes \\n \" print ( \"Unmodified:\" ) print ( name ) print ( \" \\n Using lstrip():\" ) print ( name . lstrip ()) print ( \" \\n Using rstrip():\" ) print ( name . rstrip ()) print ( \" \\n Using strip():\" ) print ( name . strip ()) Output: Unmodified: Eric Matthes Using lstrip(): Eric Matthes Using rstrip(): Eric Matthes Using strip(): Eric Matthes","title":"2-7: Stripping Names"},{"location":"solutions/chapter_2/#2-8-file-extensions","text":"Python has a removesuffix() method that works exactly like removeprefix() . Assign the value 'python_notes.txt' to a variable called filename . Then use the removesuffix() method to display the filename without the file extension, like some file browsers do. file_extensions.py filename = 'python_notes.txt' simple_filename = filename . removesuffix ( '.txt' ) print ( simple_filename ) Output: python_notes","title":"2-8: File Extensions"},{"location":"solutions/chapter_2/#2-10-favorite-number","text":"Use a variable to represent your favorite number. Then, using that variable, create a message that reveals your favorite number. Print that message. favorite_number.py fav_num = 42 msg = f \"My favorite number is { fav_num } .\" print ( msg ) Output: My favorite number is 42.","title":"2-10: Favorite Number"},{"location":"solutions/chapter_3/","text":"Solutions - Chapter 3 Back to solutions . 3-1: Names Store the names of a few of your friends in a list called names . Print each person's name by accessing each element in the list, one at a time. names.py names = [ 'ron' , 'tyler' , 'dani' ] print ( names [ 0 ]) print ( names [ 1 ]) print ( names [ 2 ]) Output: ron tyler dani 3-2: Greetings Start with the list you used in Exercise 3-1, but instead of just printing each person's name, print a message to them. The text of each message should be the same, but each message should be personalized with the person's name. greetings.py names = [ 'ron' , 'tyler' , 'dani' ] msg = f \"Hello, { names [ 0 ] . title () } !\" print ( msg ) msg = f \"Hello, { names [ 1 ] . title () } !\" print ( msg ) msg = f \"Hello, { names [ 2 ] . title () } !\" print ( msg ) Output: Hello, Ron! Hello, Tyler! Hello, Dani! 3-4: Guest List If you could invite anyone, living or deceased, to dinner, who would you invite? Make a list that includes at least three people you'd like to invite to dinner. Then use your list to print a message to each person, inviting them to dinner. guest_list.py guests = [ 'guido van rossum' , 'jack turner' , 'lynn hill' ] name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) Output: Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner. 3-5: Changing Guest List You just heard that one of your guests can't make the dinner, so you need to send out a new set of invitations. You'll have to think of someone else to invite. Start with your program from Exercise 3-4. Add a print() call at the end of your program, stating the name of the guest who can't make it. Modify your list, replacing the name of the guest who can't make it with the name of the new person you are inviting. Print a second set of invitation messages, one for each person who is still in your list. changing_guest_list.py # Invite some people to dinner. guests = [ 'guido van rossum' , 'jack turner' , 'lynn hill' ] name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" \\n Sorry, { name } can't make it to dinner.\" ) # Jack can't make it! Let's invite Gary instead. del ( guests [ 1 ]) guests . insert ( 1 , 'gary snyder' ) # Print the invitations again. name = guests [ 0 ] . title () print ( f \" \\n { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) Output: Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner. Sorry, Jack Turner can't make it to dinner. Guido Van Rossum, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. 3-6: More Guests You just found a bigger dinner table, so now more space is available. Think of three more guests to invite to dinner. Start with your program from Exercise 3-4 or Exercise 3-5. Add a print() call to the end of your program, informing people that you found a bigger dinner table. Use insert() to add one new guest to the beginning of your list. Use insert() to add one new guest to the middle of your list. Use append() to add one new guest to the end of your list. Print a new set of invitation messages, one for each person in your list. more_guests.py # Invite some people to dinner. guests = [ 'guido van rossum' , 'jack turner' , 'lynn hill' ] name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" \\n Sorry, { name } can't make it to dinner.\" ) # Jack can't make it! Let's invite Gary instead. del ( guests [ 1 ]) guests . insert ( 1 , 'gary snyder' ) # Print the invitations again. name = guests [ 0 ] . title () print ( f \" \\n { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) # We got a bigger table, so let's add some more people to the list. print ( \" \\n We got a bigger table!\" ) guests . insert ( 0 , 'frida kahlo' ) guests . insert ( 2 , 'reinhold messner' ) guests . append ( 'elizabeth peratrovich' ) name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 3 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 4 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 5 ] . title () print ( f \" { name } , please come to dinner.\" ) Output: Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner. Sorry, Jack Turner can't make it to dinner. Guido Van Rossum, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. We got a bigger table! Frida Kahlo, please come to dinner. Guido Van Rossum, please come to dinner. Reinhold Messner, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. Elizabeth Peratrovich, please come to dinner. 3-7: Shrinking Guest List You just found out that your new dinner table won't arrive in time for the dinner, and you have space for only two guests. Start with your program from Exercise 3-6. Add a new line that prints a message saying that you can invite only two people for dinner. Use pop() to remove guests from your list one at a time until only two names remain in your list. Each time you pop a name from your list, print a message to that person letting them know you're sorry you can't invite them to dinner. Print a message to each of the two people still on your list, letting them know they're still invited. Use del to remove the last two names from your list, so you have an empty list. Print your list to make sure you actually have an empty list at the end of your program. shrinking_guest_list.py # Invite some people to dinner. guests = [ 'guido van rossum' , 'jack turner' , 'lynn hill' ] name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" \\n Sorry, { name } can't make it to dinner.\" ) # Jack can't make it! Let's invite Gary instead. del ( guests [ 1 ]) guests . insert ( 1 , 'gary snyder' ) # Print the invitations again. name = guests [ 0 ] . title () print ( f \" \\n { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) # We got a bigger table, so let's add some more people to the list. print ( \" \\n We got a bigger table!\" ) guests . insert ( 0 , 'frida kahlo' ) guests . insert ( 2 , 'reinhold messner' ) guests . append ( 'elizabeth peratrovich' ) name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 3 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 4 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 5 ] . title () print ( f \" { name } , please come to dinner.\" ) # Oh no, the table won't arrive on time! print ( \" \\n Sorry, we can only invite two people to dinner.\" ) name = guests . pop () print ( f \"Sorry, { name . title () } there's no room at the table.\" ) name = guests . pop () print ( f \"Sorry, { name . title () } there's no room at the table.\" ) name = guests . pop () print ( f \"Sorry, { name . title () } there's no room at the table.\" ) name = guests . pop () print ( f \"Sorry, { name . title () } there's no room at the table.\" ) # There should be two people left. Let's invite them. name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) # Empty out the list. del ( guests [ 0 ]) del ( guests [ 0 ]) # Prove the list is empty. print ( guests ) Output: Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner. Sorry, Jack Turner can't make it to dinner. Guido Van Rossum, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. We got a bigger table! Frida Kahlo, please come to dinner. Guido Van Rossum, please come to dinner. Reinhold Messner, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. Elizabeth Peratrovich, please come to dinner. Sorry, we can only invite two people to dinner. Sorry, Elizabeth Peratrovich there's no room at the table. Sorry, Lynn Hill there's no room at the table. Sorry, Gary Snyder there's no room at the table. Sorry, Reinhold Messner there's no room at the table. Frida Kahlo, please come to dinner. Guido Van Rossum, please come to dinner. [] 3-8: Seeing the World Think of at least five places in the world you'd like to visit. Store the locations in a list. Make sure the list is not in alphabetical order. Print your list in its original order. Don't worry about printing the list neatly, just print it as a raw Python list. Use sorted() to print your list in alphabetical order without modifying the actual list. Show that your list is still in its original order by printing it. Use sorted() to print your list in reverse alphabetical order without changing the order of the original list. Show that your list is still in its original order by printing it again. Use reverse() to change the order of your list. Print the list to show that its order has changed. Use reverse() to change the order of your list again. Print the list to show it's back to its original order. Use sort() to change your list so it's stored in alphabetical order. Print the list to show that its order has been changed. Use sort() to change your list so it's stored in reverse alphabetical order. Print the list to show that its order has changed. seeing_the_world.py locations = [ 'himalaya' , 'andes' , 'tierra del fuego' , 'labrador' , 'guam' ] print ( \"Original order:\" ) print ( locations ) print ( \" \\n Alphabetical:\" ) print ( sorted ( locations )) print ( \" \\n Original order:\" ) print ( locations ) print ( \" \\n Reverse alphabetical:\" ) print ( sorted ( locations , reverse = True )) print ( \" \\n Original order:\" ) print ( locations ) print ( \" \\n Reversed:\" ) locations . reverse () print ( locations ) print ( \" \\n Original order:\" ) locations . reverse () print ( locations ) print ( \" \\n Alphabetical\" ) locations . sort () print ( locations ) print ( \" \\n Reverse alphabetical\" ) locations . sort ( reverse = True ) print ( locations ) Output: Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Alphabetical: ['andes', 'guam', 'himalaya', 'labrador', 'tierra del fuego'] Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Reverse alphabetical: ['tierra del fuego', 'labrador', 'himalaya', 'guam', 'andes'] Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Reversed: ['guam', 'labrador', 'tierra del fuego', 'andes', 'himalaya'] Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Alphabetical ['andes', 'guam', 'himalaya', 'labrador', 'tierra del fuego'] Reverse alphabetical ['tierra del fuego', 'labrador', 'himalaya', 'guam', 'andes']","title":"Chapter 3"},{"location":"solutions/chapter_3/#solutions-chapter-3","text":"Back to solutions .","title":"Solutions - Chapter 3"},{"location":"solutions/chapter_3/#3-1-names","text":"Store the names of a few of your friends in a list called names . Print each person's name by accessing each element in the list, one at a time. names.py names = [ 'ron' , 'tyler' , 'dani' ] print ( names [ 0 ]) print ( names [ 1 ]) print ( names [ 2 ]) Output: ron tyler dani","title":"3-1: Names"},{"location":"solutions/chapter_3/#3-2-greetings","text":"Start with the list you used in Exercise 3-1, but instead of just printing each person's name, print a message to them. The text of each message should be the same, but each message should be personalized with the person's name. greetings.py names = [ 'ron' , 'tyler' , 'dani' ] msg = f \"Hello, { names [ 0 ] . title () } !\" print ( msg ) msg = f \"Hello, { names [ 1 ] . title () } !\" print ( msg ) msg = f \"Hello, { names [ 2 ] . title () } !\" print ( msg ) Output: Hello, Ron! Hello, Tyler! Hello, Dani!","title":"3-2: Greetings"},{"location":"solutions/chapter_3/#3-4-guest-list","text":"If you could invite anyone, living or deceased, to dinner, who would you invite? Make a list that includes at least three people you'd like to invite to dinner. Then use your list to print a message to each person, inviting them to dinner. guest_list.py guests = [ 'guido van rossum' , 'jack turner' , 'lynn hill' ] name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) Output: Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner.","title":"3-4: Guest List"},{"location":"solutions/chapter_3/#3-5-changing-guest-list","text":"You just heard that one of your guests can't make the dinner, so you need to send out a new set of invitations. You'll have to think of someone else to invite. Start with your program from Exercise 3-4. Add a print() call at the end of your program, stating the name of the guest who can't make it. Modify your list, replacing the name of the guest who can't make it with the name of the new person you are inviting. Print a second set of invitation messages, one for each person who is still in your list. changing_guest_list.py # Invite some people to dinner. guests = [ 'guido van rossum' , 'jack turner' , 'lynn hill' ] name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" \\n Sorry, { name } can't make it to dinner.\" ) # Jack can't make it! Let's invite Gary instead. del ( guests [ 1 ]) guests . insert ( 1 , 'gary snyder' ) # Print the invitations again. name = guests [ 0 ] . title () print ( f \" \\n { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) Output: Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner. Sorry, Jack Turner can't make it to dinner. Guido Van Rossum, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner.","title":"3-5: Changing Guest List"},{"location":"solutions/chapter_3/#3-6-more-guests","text":"You just found a bigger dinner table, so now more space is available. Think of three more guests to invite to dinner. Start with your program from Exercise 3-4 or Exercise 3-5. Add a print() call to the end of your program, informing people that you found a bigger dinner table. Use insert() to add one new guest to the beginning of your list. Use insert() to add one new guest to the middle of your list. Use append() to add one new guest to the end of your list. Print a new set of invitation messages, one for each person in your list. more_guests.py # Invite some people to dinner. guests = [ 'guido van rossum' , 'jack turner' , 'lynn hill' ] name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" \\n Sorry, { name } can't make it to dinner.\" ) # Jack can't make it! Let's invite Gary instead. del ( guests [ 1 ]) guests . insert ( 1 , 'gary snyder' ) # Print the invitations again. name = guests [ 0 ] . title () print ( f \" \\n { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) # We got a bigger table, so let's add some more people to the list. print ( \" \\n We got a bigger table!\" ) guests . insert ( 0 , 'frida kahlo' ) guests . insert ( 2 , 'reinhold messner' ) guests . append ( 'elizabeth peratrovich' ) name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 3 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 4 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 5 ] . title () print ( f \" { name } , please come to dinner.\" ) Output: Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner. Sorry, Jack Turner can't make it to dinner. Guido Van Rossum, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. We got a bigger table! Frida Kahlo, please come to dinner. Guido Van Rossum, please come to dinner. Reinhold Messner, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. Elizabeth Peratrovich, please come to dinner.","title":"3-6: More Guests"},{"location":"solutions/chapter_3/#3-7-shrinking-guest-list","text":"You just found out that your new dinner table won't arrive in time for the dinner, and you have space for only two guests. Start with your program from Exercise 3-6. Add a new line that prints a message saying that you can invite only two people for dinner. Use pop() to remove guests from your list one at a time until only two names remain in your list. Each time you pop a name from your list, print a message to that person letting them know you're sorry you can't invite them to dinner. Print a message to each of the two people still on your list, letting them know they're still invited. Use del to remove the last two names from your list, so you have an empty list. Print your list to make sure you actually have an empty list at the end of your program. shrinking_guest_list.py # Invite some people to dinner. guests = [ 'guido van rossum' , 'jack turner' , 'lynn hill' ] name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" \\n Sorry, { name } can't make it to dinner.\" ) # Jack can't make it! Let's invite Gary instead. del ( guests [ 1 ]) guests . insert ( 1 , 'gary snyder' ) # Print the invitations again. name = guests [ 0 ] . title () print ( f \" \\n { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) # We got a bigger table, so let's add some more people to the list. print ( \" \\n We got a bigger table!\" ) guests . insert ( 0 , 'frida kahlo' ) guests . insert ( 2 , 'reinhold messner' ) guests . append ( 'elizabeth peratrovich' ) name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 3 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 4 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 5 ] . title () print ( f \" { name } , please come to dinner.\" ) # Oh no, the table won't arrive on time! print ( \" \\n Sorry, we can only invite two people to dinner.\" ) name = guests . pop () print ( f \"Sorry, { name . title () } there's no room at the table.\" ) name = guests . pop () print ( f \"Sorry, { name . title () } there's no room at the table.\" ) name = guests . pop () print ( f \"Sorry, { name . title () } there's no room at the table.\" ) name = guests . pop () print ( f \"Sorry, { name . title () } there's no room at the table.\" ) # There should be two people left. Let's invite them. name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) # Empty out the list. del ( guests [ 0 ]) del ( guests [ 0 ]) # Prove the list is empty. print ( guests ) Output: Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner. Sorry, Jack Turner can't make it to dinner. Guido Van Rossum, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. We got a bigger table! Frida Kahlo, please come to dinner. Guido Van Rossum, please come to dinner. Reinhold Messner, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. Elizabeth Peratrovich, please come to dinner. Sorry, we can only invite two people to dinner. Sorry, Elizabeth Peratrovich there's no room at the table. Sorry, Lynn Hill there's no room at the table. Sorry, Gary Snyder there's no room at the table. Sorry, Reinhold Messner there's no room at the table. Frida Kahlo, please come to dinner. Guido Van Rossum, please come to dinner. []","title":"3-7: Shrinking Guest List"},{"location":"solutions/chapter_3/#3-8-seeing-the-world","text":"Think of at least five places in the world you'd like to visit. Store the locations in a list. Make sure the list is not in alphabetical order. Print your list in its original order. Don't worry about printing the list neatly, just print it as a raw Python list. Use sorted() to print your list in alphabetical order without modifying the actual list. Show that your list is still in its original order by printing it. Use sorted() to print your list in reverse alphabetical order without changing the order of the original list. Show that your list is still in its original order by printing it again. Use reverse() to change the order of your list. Print the list to show that its order has changed. Use reverse() to change the order of your list again. Print the list to show it's back to its original order. Use sort() to change your list so it's stored in alphabetical order. Print the list to show that its order has been changed. Use sort() to change your list so it's stored in reverse alphabetical order. Print the list to show that its order has changed. seeing_the_world.py locations = [ 'himalaya' , 'andes' , 'tierra del fuego' , 'labrador' , 'guam' ] print ( \"Original order:\" ) print ( locations ) print ( \" \\n Alphabetical:\" ) print ( sorted ( locations )) print ( \" \\n Original order:\" ) print ( locations ) print ( \" \\n Reverse alphabetical:\" ) print ( sorted ( locations , reverse = True )) print ( \" \\n Original order:\" ) print ( locations ) print ( \" \\n Reversed:\" ) locations . reverse () print ( locations ) print ( \" \\n Original order:\" ) locations . reverse () print ( locations ) print ( \" \\n Alphabetical\" ) locations . sort () print ( locations ) print ( \" \\n Reverse alphabetical\" ) locations . sort ( reverse = True ) print ( locations ) Output: Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Alphabetical: ['andes', 'guam', 'himalaya', 'labrador', 'tierra del fuego'] Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Reverse alphabetical: ['tierra del fuego', 'labrador', 'himalaya', 'guam', 'andes'] Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Reversed: ['guam', 'labrador', 'tierra del fuego', 'andes', 'himalaya'] Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Alphabetical ['andes', 'guam', 'himalaya', 'labrador', 'tierra del fuego'] Reverse alphabetical ['tierra del fuego', 'labrador', 'himalaya', 'guam', 'andes']","title":"3-8: Seeing the World"},{"location":"solutions/chapter_4/","text":"Solutions - Chapter 4 Back to solutions . 4-1: Pizzas Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza. Modify your for loop to print a sentence using the name of the pizza, instead of printing just the name of the pizza. For each pizza, you should have one line of output containing a simple statement like I like pepperoni pizza. Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza! pizzas.py favorite_pizzas = [ 'pepperoni' , 'hawaiian' , 'veggie' ] # Print the names of all the pizzas. for pizza in favorite_pizzas : print ( pizza ) print ( \" \\n \" ) # Print a sentence about each pizza. for pizza in favorite_pizzas : print ( f \"I really love { pizza } pizza!\" ) print ( \" \\n I really love pizza!\" ) Output: pepperoni hawaiian veggie I really love pepperoni pizza! I really love hawaiian pizza! I really love veggie pizza! I really love pizza! 4-2: Animals Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal. - Modify your program to print a statement about each animal, such as A dog would make a great pet. - Add a line at the end of your program, stating what these animals have in common. You could print a sentence, such as Any of these animals would make a great pet! animals.py animals = [ \"spider monkey\" , \"lemur\" , \"giraffe\" ] # Print each animal. for animal in animals : print ( animal ) print ( \" \\n \" ) # Print a statement about each animal. for animal in animals : print ( f \"A { animal } has a long tail.\" ) print ( \" \\n All of these animals have long tails.\" ) Output: spider monkey lemur giraffe A spider monkey has a long tail. A lemur has a long tail. A giraffe has a long tail. All of these animals have long tails. 4-3: Counting to Twenty Use a for loop to print the numbers from 1 to 20, inclusive. counting_to_twenty.py numbers = list ( range ( 1 , 21 )) for number in numbers : print ( number ) Output: 1 2 3 ... 18 19 20 4-5: Summing a Million Make a list of the numbers from one to one million, and then use min() and max() to make sure your list actually starts at one and ends at one million. Also, use the sum() function to see how quickly Python can add a million numbers. summing_a_million.py numbers = list ( range ( 1 , 1_000_001 )) print ( min ( numbers )) print ( max ( numbers )) print ( sum ( numbers )) Output: 1 1000000 500000500000 4-6: Odd Numbers Use the third argument of the range() function to make a list of the odd numbers from 1 to 20. Use a for loop to print each number. odd_numbers.py odd_numbers = list ( range ( 1 , 20 , 2 )) for number in odd_numbers : print ( number ) Output: 1 3 5 ... 15 17 19 4-7: Threes Make a list of the multiples of 3 from 3 to 30. Use a for loop to print the numbers in your list. threes.py threes = list ( range ( 3 , 31 , 3 )) for number in threes : print ( number ) Output: 3 6 9 ... 24 27 30 4-8: Cubes A number raised to the third power is called a cube . For example, the cube of 2 is written as 2**3 in Python. Make a list of the first 10 cubes (that is, the cube of each integer from 1 through 10), and use a for loop to print out the value of each cube. cubes.py cubes = [] for number in range ( 1 , 11 ): cube = number ** 3 cubes . append ( cube ) for cube in cubes : print ( cube ) Output: 1 8 27 ... 512 729 1000 4-9: Cube Comprehension Use a list comprehension to generate a list of the first 10 cubes. cube_comprehension.py cubes = [ number ** 3 for number in range ( 1 , 11 )] for cube in cubes : print ( cube ) Output: 1 8 27 ... 512 729 1000 4-11: My Pizzas, Your Pizzas Start with your program from Exercise 4-1 (page 56). Make a copy of the list of pizzas, and call it friend_pizzas . Then, do the following: Add a new pizza to the original list. Add a different pizza to the list friend_pizzas . Prove that you have two separate lists. Print the message, My favorite pizzas are: , and then use a for loop to print the first list. Print the message, My friend's favorite pizzas are: , and then use a for loop to print the second list. Make sure each new pizza is stored in the appropriate list. my_pizzas_your_pizzas.py favorite_pizzas = [ 'pepperoni' , 'hawaiian' , 'veggie' ] friend_pizzas = favorite_pizzas [:] favorite_pizzas . append ( \"meat lover's\" ) friend_pizzas . append ( 'pesto' ) print ( \"My favorite pizzas are:\" ) for pizza in favorite_pizzas : print ( f \"- { pizza } \" ) print ( \" \\n My friend's favorite pizzas are:\" ) for pizza in friend_pizzas : print ( f \"- { pizza } \" ) Output: My favorite pizzas are: - pepperoni - hawaiian - veggie - meat lover's My friend's favorite pizzas are: - pepperoni - hawaiian - veggie - pesto 4-12: More Loops All versions of foods.py in this section have avoided using for loops when printing, to save space. Choose a version of foods.py , and write two for loops to print each list of foods. more_loops.py my_foods = [ 'pizza' , 'falafel' , 'carrot cake' ] friend_foods = my_foods [:] my_foods . append ( 'cannoli' ) friend_foods . append ( 'ice cream' ) print ( \"My favorite foods are:\" ) for food in my_foods : print ( f \"- { food } \" ) print ( \" \\n My friend's favorite foods are:\" ) for food in friend_foods : print ( f \"- { food } \" ) Output: My favorite foods are: - pizza - falafel - carrot cake - cannoli My friend's favorite foods are: - pizza - falafel - carrot cake - ice cream 4-13: Buffet A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple. Use a for loop to print each food the restaurant offers. Try to modify one of the items, and make sure that Python rejects the change. The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu. buffet.py menu_items = ( 'rockfish sandwich' , 'halibut nuggets' , 'smoked salmon chowder' , 'salmon burger' , 'crab cakes' , ) print ( \"You can choose from the following menu items:\" ) for item in menu_items : print ( f \"- { item } \" ) menu_items = ( 'rockfish sandwich' , 'halibut nuggets' , 'smoked salmon chowder' , 'black cod tips' , 'king crab legs' , ) print ( \" \\n Our menu has been updated.\" ) print ( \"You can now choose from the following items:\" ) for item in menu_items : print ( f \"- { item } \" ) Output: You can choose from the following menu items: - rockfish sandwich - halibut nuggets - smoked salmon chowder - salmon burger - crab cakes Our menu has been updated. You can now choose from the following items: - rockfish sandwich - halibut nuggets - smoked salmon chowder - black cod tips - king crab legs","title":"Chapter 4"},{"location":"solutions/chapter_4/#solutions-chapter-4","text":"Back to solutions .","title":"Solutions - Chapter 4"},{"location":"solutions/chapter_4/#4-1-pizzas","text":"Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza. Modify your for loop to print a sentence using the name of the pizza, instead of printing just the name of the pizza. For each pizza, you should have one line of output containing a simple statement like I like pepperoni pizza. Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza! pizzas.py favorite_pizzas = [ 'pepperoni' , 'hawaiian' , 'veggie' ] # Print the names of all the pizzas. for pizza in favorite_pizzas : print ( pizza ) print ( \" \\n \" ) # Print a sentence about each pizza. for pizza in favorite_pizzas : print ( f \"I really love { pizza } pizza!\" ) print ( \" \\n I really love pizza!\" ) Output: pepperoni hawaiian veggie I really love pepperoni pizza! I really love hawaiian pizza! I really love veggie pizza! I really love pizza!","title":"4-1: Pizzas"},{"location":"solutions/chapter_4/#4-2-animals","text":"Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal. - Modify your program to print a statement about each animal, such as A dog would make a great pet. - Add a line at the end of your program, stating what these animals have in common. You could print a sentence, such as Any of these animals would make a great pet! animals.py animals = [ \"spider monkey\" , \"lemur\" , \"giraffe\" ] # Print each animal. for animal in animals : print ( animal ) print ( \" \\n \" ) # Print a statement about each animal. for animal in animals : print ( f \"A { animal } has a long tail.\" ) print ( \" \\n All of these animals have long tails.\" ) Output: spider monkey lemur giraffe A spider monkey has a long tail. A lemur has a long tail. A giraffe has a long tail. All of these animals have long tails.","title":"4-2: Animals"},{"location":"solutions/chapter_4/#4-3-counting-to-twenty","text":"Use a for loop to print the numbers from 1 to 20, inclusive. counting_to_twenty.py numbers = list ( range ( 1 , 21 )) for number in numbers : print ( number ) Output: 1 2 3 ... 18 19 20","title":"4-3: Counting to Twenty"},{"location":"solutions/chapter_4/#4-5-summing-a-million","text":"Make a list of the numbers from one to one million, and then use min() and max() to make sure your list actually starts at one and ends at one million. Also, use the sum() function to see how quickly Python can add a million numbers. summing_a_million.py numbers = list ( range ( 1 , 1_000_001 )) print ( min ( numbers )) print ( max ( numbers )) print ( sum ( numbers )) Output: 1 1000000 500000500000","title":"4-5: Summing a Million"},{"location":"solutions/chapter_4/#4-6-odd-numbers","text":"Use the third argument of the range() function to make a list of the odd numbers from 1 to 20. Use a for loop to print each number. odd_numbers.py odd_numbers = list ( range ( 1 , 20 , 2 )) for number in odd_numbers : print ( number ) Output: 1 3 5 ... 15 17 19","title":"4-6: Odd Numbers"},{"location":"solutions/chapter_4/#4-7-threes","text":"Make a list of the multiples of 3 from 3 to 30. Use a for loop to print the numbers in your list. threes.py threes = list ( range ( 3 , 31 , 3 )) for number in threes : print ( number ) Output: 3 6 9 ... 24 27 30","title":"4-7: Threes"},{"location":"solutions/chapter_4/#4-8-cubes","text":"A number raised to the third power is called a cube . For example, the cube of 2 is written as 2**3 in Python. Make a list of the first 10 cubes (that is, the cube of each integer from 1 through 10), and use a for loop to print out the value of each cube. cubes.py cubes = [] for number in range ( 1 , 11 ): cube = number ** 3 cubes . append ( cube ) for cube in cubes : print ( cube ) Output: 1 8 27 ... 512 729 1000","title":"4-8: Cubes"},{"location":"solutions/chapter_4/#4-9-cube-comprehension","text":"Use a list comprehension to generate a list of the first 10 cubes. cube_comprehension.py cubes = [ number ** 3 for number in range ( 1 , 11 )] for cube in cubes : print ( cube ) Output: 1 8 27 ... 512 729 1000","title":"4-9: Cube Comprehension"},{"location":"solutions/chapter_4/#4-11-my-pizzas-your-pizzas","text":"Start with your program from Exercise 4-1 (page 56). Make a copy of the list of pizzas, and call it friend_pizzas . Then, do the following: Add a new pizza to the original list. Add a different pizza to the list friend_pizzas . Prove that you have two separate lists. Print the message, My favorite pizzas are: , and then use a for loop to print the first list. Print the message, My friend's favorite pizzas are: , and then use a for loop to print the second list. Make sure each new pizza is stored in the appropriate list. my_pizzas_your_pizzas.py favorite_pizzas = [ 'pepperoni' , 'hawaiian' , 'veggie' ] friend_pizzas = favorite_pizzas [:] favorite_pizzas . append ( \"meat lover's\" ) friend_pizzas . append ( 'pesto' ) print ( \"My favorite pizzas are:\" ) for pizza in favorite_pizzas : print ( f \"- { pizza } \" ) print ( \" \\n My friend's favorite pizzas are:\" ) for pizza in friend_pizzas : print ( f \"- { pizza } \" ) Output: My favorite pizzas are: - pepperoni - hawaiian - veggie - meat lover's My friend's favorite pizzas are: - pepperoni - hawaiian - veggie - pesto","title":"4-11: My Pizzas, Your Pizzas"},{"location":"solutions/chapter_4/#4-12-more-loops","text":"All versions of foods.py in this section have avoided using for loops when printing, to save space. Choose a version of foods.py , and write two for loops to print each list of foods. more_loops.py my_foods = [ 'pizza' , 'falafel' , 'carrot cake' ] friend_foods = my_foods [:] my_foods . append ( 'cannoli' ) friend_foods . append ( 'ice cream' ) print ( \"My favorite foods are:\" ) for food in my_foods : print ( f \"- { food } \" ) print ( \" \\n My friend's favorite foods are:\" ) for food in friend_foods : print ( f \"- { food } \" ) Output: My favorite foods are: - pizza - falafel - carrot cake - cannoli My friend's favorite foods are: - pizza - falafel - carrot cake - ice cream","title":"4-12: More Loops"},{"location":"solutions/chapter_4/#4-13-buffet","text":"A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple. Use a for loop to print each food the restaurant offers. Try to modify one of the items, and make sure that Python rejects the change. The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu. buffet.py menu_items = ( 'rockfish sandwich' , 'halibut nuggets' , 'smoked salmon chowder' , 'salmon burger' , 'crab cakes' , ) print ( \"You can choose from the following menu items:\" ) for item in menu_items : print ( f \"- { item } \" ) menu_items = ( 'rockfish sandwich' , 'halibut nuggets' , 'smoked salmon chowder' , 'black cod tips' , 'king crab legs' , ) print ( \" \\n Our menu has been updated.\" ) print ( \"You can now choose from the following items:\" ) for item in menu_items : print ( f \"- { item } \" ) Output: You can choose from the following menu items: - rockfish sandwich - halibut nuggets - smoked salmon chowder - salmon burger - crab cakes Our menu has been updated. You can now choose from the following items: - rockfish sandwich - halibut nuggets - smoked salmon chowder - black cod tips - king crab legs","title":"4-13: Buffet"}]}