{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python Crash Course, Third Edition This is a collection of resources for Python Crash Course (3rd Ed.) , an introductory programming book from No Starch Press by Eric Matthes. The simplest way to download the source code files for the book is to click on the Download .zip button below. This will download the source code files for all chapters, as well as a number of data files and images you'll need for the projects. Download .zip View on GitHub The full set of resources for the third edition is still being developed. If you are an early reader of the third edition, some of the second edition's resources may still be useful, such as the Cheat Sheets and articles such as Finding Employment . If you have any questions about Python Crash Course, feel free to get in touch: Email: ehmatthes@gmail.com Twitter: @ehmatthes Mastodon: @ehmatthes@fosstodon.org Available from No Starch Press , Amazon , and Barnes & Noble . You can also find Python Crash Course in person at Barnes & Noble bookstores, and other fine booksellers worldwide.","title":"Home"},{"location":"#python-crash-course-third-edition","text":"This is a collection of resources for Python Crash Course (3rd Ed.) , an introductory programming book from No Starch Press by Eric Matthes. The simplest way to download the source code files for the book is to click on the Download .zip button below. This will download the source code files for all chapters, as well as a number of data files and images you'll need for the projects. Download .zip View on GitHub The full set of resources for the third edition is still being developed. If you are an early reader of the third edition, some of the second edition's resources may still be useful, such as the Cheat Sheets and articles such as Finding Employment . If you have any questions about Python Crash Course, feel free to get in touch: Email: ehmatthes@gmail.com Twitter: @ehmatthes Mastodon: @ehmatthes@fosstodon.org Available from No Starch Press , Amazon , and Barnes & Noble . You can also find Python Crash Course in person at Barnes & Noble bookstores, and other fine booksellers worldwide.","title":"Python Crash Course, Third Edition"},{"location":"contact/","text":"Contact If you have any questions about Python Crash Course, or any feedback about what you see here, please feel free to get in touch: Email: ehmatthes@gmail.com Twitter: @ehmatthes Mastodon: @ehmatthes@fosstodon.org","title":"Contact"},{"location":"contact/#contact","text":"If you have any questions about Python Crash Course, or any feedback about what you see here, please feel free to get in touch: Email: ehmatthes@gmail.com Twitter: @ehmatthes Mastodon: @ehmatthes@fosstodon.org","title":"Contact"},{"location":"new_in_3e/","text":"What's new in the third edition? Python is a mature language, but like every programming language it continues to evolve. The third edition incorporates the most important new features in Python, without becoming bloated by trying to include every new feature that's been introduced in recent years. The new edition uses the latest versions of all third-party libraries in the projects section. Overall changes Here's a summary of the changes that have been made to the book overall: The third edition uses Python 3.11. (The second edition was written using Python 3.7.) The new edition uses VS Code instead of Sublime Text. VS Code is fully open, and has seen widespread adoption in the Python world over the last several years. Code listings are less cluttered and easier to follow throughout the book. The new edition uses updated libraries throughout, and updated workflows for each library. Specific changes Chapter 1 In the setup section, VS Code is recommended as a text editor for readers who don't already have a preference. (You can use any editor that's properly configured to run Python code.) Chapter 2 This chapter introduces removeprefix() and removesuffix() , two new methods that are helpful when working with files and URLs. Chapter 2 also includes Python's newly-improved error messages, which provide much more specific information to help you troubleshoot your code when something goes wrong. Chapters 3-9 Many explanations have been clarified, and code listings have been simplified. (There were some annotations in shorter listings that weren't really necessary.) Chapter 10 Chapter 10 uses the pathlib module for working with files. This is a much simpler approach to reading from and writing to files. It's also in keeping with how most major libraries are working with files now. Chapter 11 pytest is now the main testing library in the Python world. It's accessible to beginners, but powerful enough to serve professional testing needs as well. Chapter 11 now uses pytest instead of the standard library's unittest . This chapter shows how to install third-party libraries, instead of introducing the topic in several different projects in the second half of the book. Alien Invasion (Chapters 12-14) The game uses an FPS (frames per second) setting, to make it run more consistently across all systems. The approach to building the alien fleet is simpler and easier to understand. The code listings throughout the project are presented in an order that's easier to follow. Data Visualization (Chapters 15-17) Matplotlib has changed some of its default style settings; all figures in the new edition match the current default styles. Plotly has introduced Plotly Express, a module that focuses on building an initial plot quickly, and then making styling choices. The third edition uses this new approach. The random walk project has a small improvement that increases the accuracy of the plots; you'll see a wider variety of patterns emerge each time you generate a new walk. The weather and earthquake projects use updated data sets. The GitHub data used in Chapter 17 is fully updated. Web Applications (Chapters 18-20) The Learning Log project is built using Django 4.1, and the project is styled using Bootstrap 5. Some parts of the project have been renamed to make it easier to understand the overall layout of a Django project. The deployment section has been updated. The project is now deployed to Platform.sh, a modern hosting service for Django projects. The deployment process is controlled by YAML configuration files, which give you a great deal of control over how your project is deployed. This approach is consistent with how professional programmers deploy modern Django projects. Appendices Appendix A includes updated supplementary installation and setup instructions, for readers who run into any issues installing Python. Appendix B discusses customizations you can make to VS Code to make it more useful for writing and maintaining Python code. It also includes a number of shortcuts you can use to work more efficiently in VS Code. Appendix C includes an updated set of resources for getting help online. Appendix D uses the new git restore command for rolling back changes in a project, and the git switch command for getting back to the main branch in a project. Appendix E, which is entirely new, expands on the deployment process for web applications. Deployment is a complex process when it doesn't go perfectly. This appendix provides some guidance on how to troubleshoot deployments when they don't work the first time you try them. Index The new edition has been entirely re-indexed, to help you find what you need quickly after you've worked through the book.","title":"What's new?"},{"location":"new_in_3e/#whats-new-in-the-third-edition","text":"Python is a mature language, but like every programming language it continues to evolve. The third edition incorporates the most important new features in Python, without becoming bloated by trying to include every new feature that's been introduced in recent years. The new edition uses the latest versions of all third-party libraries in the projects section.","title":"What's new in the third edition?"},{"location":"new_in_3e/#overall-changes","text":"Here's a summary of the changes that have been made to the book overall: The third edition uses Python 3.11. (The second edition was written using Python 3.7.) The new edition uses VS Code instead of Sublime Text. VS Code is fully open, and has seen widespread adoption in the Python world over the last several years. Code listings are less cluttered and easier to follow throughout the book. The new edition uses updated libraries throughout, and updated workflows for each library.","title":"Overall changes"},{"location":"new_in_3e/#specific-changes","text":"","title":"Specific changes"},{"location":"new_in_3e/#chapter-1","text":"In the setup section, VS Code is recommended as a text editor for readers who don't already have a preference. (You can use any editor that's properly configured to run Python code.)","title":"Chapter 1"},{"location":"new_in_3e/#chapter-2","text":"This chapter introduces removeprefix() and removesuffix() , two new methods that are helpful when working with files and URLs. Chapter 2 also includes Python's newly-improved error messages, which provide much more specific information to help you troubleshoot your code when something goes wrong.","title":"Chapter 2"},{"location":"new_in_3e/#chapters-3-9","text":"Many explanations have been clarified, and code listings have been simplified. (There were some annotations in shorter listings that weren't really necessary.)","title":"Chapters 3-9"},{"location":"new_in_3e/#chapter-10","text":"Chapter 10 uses the pathlib module for working with files. This is a much simpler approach to reading from and writing to files. It's also in keeping with how most major libraries are working with files now.","title":"Chapter 10"},{"location":"new_in_3e/#chapter-11","text":"pytest is now the main testing library in the Python world. It's accessible to beginners, but powerful enough to serve professional testing needs as well. Chapter 11 now uses pytest instead of the standard library's unittest . This chapter shows how to install third-party libraries, instead of introducing the topic in several different projects in the second half of the book.","title":"Chapter 11"},{"location":"new_in_3e/#alien-invasion-chapters-12-14","text":"The game uses an FPS (frames per second) setting, to make it run more consistently across all systems. The approach to building the alien fleet is simpler and easier to understand. The code listings throughout the project are presented in an order that's easier to follow.","title":"Alien Invasion (Chapters 12-14)"},{"location":"new_in_3e/#data-visualization-chapters-15-17","text":"Matplotlib has changed some of its default style settings; all figures in the new edition match the current default styles. Plotly has introduced Plotly Express, a module that focuses on building an initial plot quickly, and then making styling choices. The third edition uses this new approach. The random walk project has a small improvement that increases the accuracy of the plots; you'll see a wider variety of patterns emerge each time you generate a new walk. The weather and earthquake projects use updated data sets. The GitHub data used in Chapter 17 is fully updated.","title":"Data Visualization (Chapters 15-17)"},{"location":"new_in_3e/#web-applications-chapters-18-20","text":"The Learning Log project is built using Django 4.1, and the project is styled using Bootstrap 5. Some parts of the project have been renamed to make it easier to understand the overall layout of a Django project. The deployment section has been updated. The project is now deployed to Platform.sh, a modern hosting service for Django projects. The deployment process is controlled by YAML configuration files, which give you a great deal of control over how your project is deployed. This approach is consistent with how professional programmers deploy modern Django projects.","title":"Web Applications (Chapters 18-20)"},{"location":"new_in_3e/#appendices","text":"Appendix A includes updated supplementary installation and setup instructions, for readers who run into any issues installing Python. Appendix B discusses customizations you can make to VS Code to make it more useful for writing and maintaining Python code. It also includes a number of shortcuts you can use to work more efficiently in VS Code. Appendix C includes an updated set of resources for getting help online. Appendix D uses the new git restore command for rolling back changes in a project, and the git switch command for getting back to the main branch in a project. Appendix E, which is entirely new, expands on the deployment process for web applications. Deployment is a complex process when it doesn't go perfectly. This appendix provides some guidance on how to troubleshoot deployments when they don't work the first time you try them.","title":"Appendices"},{"location":"new_in_3e/#index","text":"The new edition has been entirely re-indexed, to help you find what you need quickly after you've worked through the book.","title":"Index"},{"location":"solutions/","text":"Solutions Solutions for selected exercises from each chapter can be found below. Be careful about looking at the solutions too quickly; make sure you've given yourself time to wrestle with the concepts you just learned before looking at a solution. Also, there are several ways to solve many of the exercises, and the solutions only show one possible way to complete each exercise. I haven't included solutions for Chapters 18-20, because the exercises for those chapters are really projects in themselves. If you're having trouble with an exercise from one of those chapters consider posting on Stack Overflow , r/learnpython , or get in touch. Chapter 2 Questions and Feedback If you're stuck on something and what you see here isn't helping, please feel free to get in touch. Also, if you think you've found a mistake in the book or in the online resources, I'd love to know about it! Email: ehmatthes@gmail.com Twitter: @ehmatthes Mastodon: @ehmatthes@fosstodon.org","title":"Solutions"},{"location":"solutions/#solutions","text":"Solutions for selected exercises from each chapter can be found below. Be careful about looking at the solutions too quickly; make sure you've given yourself time to wrestle with the concepts you just learned before looking at a solution. Also, there are several ways to solve many of the exercises, and the solutions only show one possible way to complete each exercise. I haven't included solutions for Chapters 18-20, because the exercises for those chapters are really projects in themselves. If you're having trouble with an exercise from one of those chapters consider posting on Stack Overflow , r/learnpython , or get in touch. Chapter 2","title":"Solutions"},{"location":"solutions/#questions-and-feedback","text":"If you're stuck on something and what you see here isn't helping, please feel free to get in touch. Also, if you think you've found a mistake in the book or in the online resources, I'd love to know about it! Email: ehmatthes@gmail.com Twitter: @ehmatthes Mastodon: @ehmatthes@fosstodon.org","title":"Questions and Feedback"},{"location":"solutions/chapter_2/","text":"Solutions - Chapter 2 Back to solutions . 2-1: Simple Message Assign a message to a variable, and then print that message. simple_message.py msg = \"I love learning to use Python.\" print ( msg ) Output: I love learning to use Python. 2-2: Simple Messages Assign a message to a variable, and print that message. Then change the value of the variable to a new message, and print the new message. simple_messages.py msg = \"I love learning to use Python.\" print ( msg ) msg = \"It's really satisfying!\" print ( msg ) Output: I love learning to use Python. It's really satisfying! 2-3: Personal Message Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d personal_message.py name = \"eric\" msg = f \"Hello { name . title () } , would you like to learn some Python today?\" print ( msg ) Output: Hello Eric, would you like to learn some Python today? 2-4: Name Cases Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case. name_cases.py name = \"eric\" print ( name . lower ()) print ( name . upper ()) print ( name . title ()) Output: eric ERIC Eric 2-5: Famous Quote Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks: Albert Einstein once said, \"A person who never made a mistake never tried anything new.\" famous_quote.py print ( 'Albert Einstein once said, \"A person who never made a mistake' ) print ( 'never tried anything new.\"' ) Output: Albert Einstein once said, \"A person who never made a mistake never tried anything new.\" 2-6: Famous Quote 2 Repeat Exercise 2-5, but this time, represent the famous person\u2019s name using a variable called famous_person . Then compose your message and represent it with a new variable called message . Print your message. famous_quote_2.py famous_person = \"Albert Einstein\" message = f ' { famous_person } once said, \"A person who never made a mistake never tried anything new.\"' print ( message ) Output: Albert Einstein once said, \"A person who never made a mistake never tried anything new.\" Note The line that defines message in this file is longer than we'd typically like to write. You'll see this a little later in Chapter 7, but you can add to a string using the += operator. So this program could also be written like this, with exactly the same output: famous_quote_3.py famous_person = \"Albert Einstein\" message = f ' { famous_person } once said, \"A person who never made a mistake' message += ' never tried anything new.\"' print ( message ) 2-7: Stripping Names Use a variable to represent a person's name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\" , at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip() , rstrip() , and strip() . stripping_names.py name = \" \\t Eric Matthes \\n \" print ( \"Unmodified:\" ) print ( name ) print ( \" \\n Using lstrip():\" ) print ( name . lstrip ()) print ( \" \\n Using rstrip():\" ) print ( name . rstrip ()) print ( \" \\n Using strip():\" ) print ( name . strip ()) Output: Unmodified: Eric Matthes Using lstrip(): Eric Matthes Using rstrip(): Eric Matthes Using strip(): Eric Matthes 2-8: File Extensions Python has a removesuffix() method that works exactly like removeprefix() . Assign the value 'python_notes.txt' to a variable called filename . Then use the removesuffix() method to display the filename without the file extension, like some file browsers do. file_extensions.py filename = 'python_notes.txt' simple_filename = filename . removesuffix ( '.txt' ) print ( simple_filename ) Output: python_notes 2-10: Favorite Number Use a variable to represent your favorite number. Then, using that variable, create a message that reveals your favorite number. Print that message. favorite_number.py fav_num = 42 msg = f \"My favorite number is { fav_num } .\" print ( msg ) Output: My favorite number is 42.","title":"Chapter 2"},{"location":"solutions/chapter_2/#solutions-chapter-2","text":"Back to solutions .","title":"Solutions - Chapter 2"},{"location":"solutions/chapter_2/#2-1-simple-message","text":"Assign a message to a variable, and then print that message. simple_message.py msg = \"I love learning to use Python.\" print ( msg ) Output: I love learning to use Python.","title":"2-1: Simple Message"},{"location":"solutions/chapter_2/#2-2-simple-messages","text":"Assign a message to a variable, and print that message. Then change the value of the variable to a new message, and print the new message. simple_messages.py msg = \"I love learning to use Python.\" print ( msg ) msg = \"It's really satisfying!\" print ( msg ) Output: I love learning to use Python. It's really satisfying!","title":"2-2: Simple Messages"},{"location":"solutions/chapter_2/#2-3-personal-message","text":"Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d personal_message.py name = \"eric\" msg = f \"Hello { name . title () } , would you like to learn some Python today?\" print ( msg ) Output: Hello Eric, would you like to learn some Python today?","title":"2-3: Personal Message"},{"location":"solutions/chapter_2/#2-4-name-cases","text":"Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case. name_cases.py name = \"eric\" print ( name . lower ()) print ( name . upper ()) print ( name . title ()) Output: eric ERIC Eric","title":"2-4: Name Cases"},{"location":"solutions/chapter_2/#2-5-famous-quote","text":"Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks: Albert Einstein once said, \"A person who never made a mistake never tried anything new.\" famous_quote.py print ( 'Albert Einstein once said, \"A person who never made a mistake' ) print ( 'never tried anything new.\"' ) Output: Albert Einstein once said, \"A person who never made a mistake never tried anything new.\"","title":"2-5: Famous Quote"},{"location":"solutions/chapter_2/#2-6-famous-quote-2","text":"Repeat Exercise 2-5, but this time, represent the famous person\u2019s name using a variable called famous_person . Then compose your message and represent it with a new variable called message . Print your message. famous_quote_2.py famous_person = \"Albert Einstein\" message = f ' { famous_person } once said, \"A person who never made a mistake never tried anything new.\"' print ( message ) Output: Albert Einstein once said, \"A person who never made a mistake never tried anything new.\" Note The line that defines message in this file is longer than we'd typically like to write. You'll see this a little later in Chapter 7, but you can add to a string using the += operator. So this program could also be written like this, with exactly the same output: famous_quote_3.py famous_person = \"Albert Einstein\" message = f ' { famous_person } once said, \"A person who never made a mistake' message += ' never tried anything new.\"' print ( message )","title":"2-6: Famous Quote 2"},{"location":"solutions/chapter_2/#2-7-stripping-names","text":"Use a variable to represent a person's name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\" , at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip() , rstrip() , and strip() . stripping_names.py name = \" \\t Eric Matthes \\n \" print ( \"Unmodified:\" ) print ( name ) print ( \" \\n Using lstrip():\" ) print ( name . lstrip ()) print ( \" \\n Using rstrip():\" ) print ( name . rstrip ()) print ( \" \\n Using strip():\" ) print ( name . strip ()) Output: Unmodified: Eric Matthes Using lstrip(): Eric Matthes Using rstrip(): Eric Matthes Using strip(): Eric Matthes","title":"2-7: Stripping Names"},{"location":"solutions/chapter_2/#2-8-file-extensions","text":"Python has a removesuffix() method that works exactly like removeprefix() . Assign the value 'python_notes.txt' to a variable called filename . Then use the removesuffix() method to display the filename without the file extension, like some file browsers do. file_extensions.py filename = 'python_notes.txt' simple_filename = filename . removesuffix ( '.txt' ) print ( simple_filename ) Output: python_notes","title":"2-8: File Extensions"},{"location":"solutions/chapter_2/#2-10-favorite-number","text":"Use a variable to represent your favorite number. Then, using that variable, create a message that reveals your favorite number. Print that message. favorite_number.py fav_num = 42 msg = f \"My favorite number is { fav_num } .\" print ( msg ) Output: My favorite number is 42.","title":"2-10: Favorite Number"}]}