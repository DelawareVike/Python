{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python Crash Course, Third Edition This is a collection of resources for Python Crash Course (3rd Ed.) , an introductory programming book from No Starch Press by Eric Matthes. The simplest way to download the source code files for the book is to click on the Download .zip button below. This will download the source code files for all chapters, as well as a number of data files and images you'll need for the projects. Download .zip View on GitHub The full set of resources for the third edition is still being developed. If you are an early reader of the third edition, some of the second edition's resources may still be useful, such as the Cheat Sheets and articles such as Finding Employment . If you have any questions about Python Crash Course, feel free to get in touch: Email: ehmatthes@gmail.com Twitter: @ehmatthes Mastodon: @ehmatthes@fosstodon.org Available from No Starch Press , Amazon , and Barnes & Noble . You can also find Python Crash Course in person at Barnes & Noble bookstores, and other fine booksellers worldwide.","title":"Home"},{"location":"#python-crash-course-third-edition","text":"This is a collection of resources for Python Crash Course (3rd Ed.) , an introductory programming book from No Starch Press by Eric Matthes. The simplest way to download the source code files for the book is to click on the Download .zip button below. This will download the source code files for all chapters, as well as a number of data files and images you'll need for the projects. Download .zip View on GitHub The full set of resources for the third edition is still being developed. If you are an early reader of the third edition, some of the second edition's resources may still be useful, such as the Cheat Sheets and articles such as Finding Employment . If you have any questions about Python Crash Course, feel free to get in touch: Email: ehmatthes@gmail.com Twitter: @ehmatthes Mastodon: @ehmatthes@fosstodon.org Available from No Starch Press , Amazon , and Barnes & Noble . You can also find Python Crash Course in person at Barnes & Noble bookstores, and other fine booksellers worldwide.","title":"Python Crash Course, Third Edition"},{"location":"contact/","text":"Contact If you have any questions about Python Crash Course, or any feedback about what you see here, please feel free to get in touch: Email: ehmatthes@gmail.com Twitter: @ehmatthes Mastodon: @ehmatthes@fosstodon.org","title":"Contact"},{"location":"contact/#contact","text":"If you have any questions about Python Crash Course, or any feedback about what you see here, please feel free to get in touch: Email: ehmatthes@gmail.com Twitter: @ehmatthes Mastodon: @ehmatthes@fosstodon.org","title":"Contact"},{"location":"new_in_3e/","text":"What's new in the third edition? Python is a mature language, but like every programming language it continues to evolve. The third edition incorporates the most important new features in Python, without becoming bloated by trying to include every new feature that's been introduced in recent years. The new edition uses the latest versions of all third-party libraries in the projects section. Overall changes Here's a summary of the changes that have been made to the book overall: The third edition uses Python 3.11. (The second edition was written using Python 3.7.) The new edition uses VS Code instead of Sublime Text. VS Code is fully open, and has seen widespread adoption in the Python world over the last several years. Code listings are less cluttered and easier to follow throughout the book. The new edition uses updated libraries throughout, and updated workflows for each library. Specific changes Chapter 1 In the setup section, VS Code is recommended as a text editor for readers who don't already have a preference. (You can use any editor that's properly configured to run Python code.) Chapter 2 This chapter introduces removeprefix() and removesuffix() , two new methods that are helpful when working with files and URLs. Chapter 2 also includes Python's newly-improved error messages, which provide much more specific information to help you troubleshoot your code when something goes wrong. Chapters 3-9 Many explanations have been clarified, and code listings have been simplified. (There were some annotations in shorter listings that weren't really necessary.) Chapter 10 Chapter 10 uses the pathlib module for working with files. This is a much simpler approach to reading from and writing to files. It's also in keeping with how most major libraries are working with files now. Chapter 11 pytest is now the main testing library in the Python world. It's accessible to beginners, but powerful enough to serve professional testing needs as well. Chapter 11 now uses pytest instead of the standard library's unittest . This chapter shows how to install third-party libraries, instead of introducing the topic in several different projects in the second half of the book. Alien Invasion (Chapters 12-14) The game uses an FPS (frames per second) setting, to make it run more consistently across all systems. The approach to building the alien fleet is simpler and easier to understand. The code listings throughout the project are presented in an order that's easier to follow. Data Visualization (Chapters 15-17) Matplotlib has changed some of its default style settings; all figures in the new edition match the current default styles. Plotly has introduced Plotly Express, a module that focuses on building an initial plot quickly, and then making styling choices. The third edition uses this new approach. The random walk project has a small improvement that increases the accuracy of the plots; you'll see a wider variety of patterns emerge each time you generate a new walk. The weather and earthquake projects use updated data sets. The GitHub data used in Chapter 17 is fully updated. Web Applications (Chapters 18-20) The Learning Log project is built using Django 4.1, and the project is styled using Bootstrap 5. Some parts of the project have been renamed to make it easier to understand the overall layout of a Django project. The deployment section has been updated. The project is now deployed to Platform.sh, a modern hosting service for Django projects. The deployment process is controlled by YAML configuration files, which give you a great deal of control over how your project is deployed. This approach is consistent with how professional programmers deploy modern Django projects. Appendices Appendix A includes updated supplementary installation and setup instructions, for readers who run into any issues installing Python. Appendix B discusses customizations you can make to VS Code to make it more useful for writing and maintaining Python code. It also includes a number of shortcuts you can use to work more efficiently in VS Code. Appendix C includes an updated set of resources for getting help online. Appendix D uses the new git restore command for rolling back changes in a project, and the git switch command for getting back to the main branch in a project. Appendix E, which is entirely new, expands on the deployment process for web applications. Deployment is a complex process when it doesn't go perfectly. This appendix provides some guidance on how to troubleshoot deployments when they don't work the first time you try them. Index The new edition has been entirely re-indexed, to help you find what you need quickly after you've worked through the book.","title":"What's new?"},{"location":"new_in_3e/#whats-new-in-the-third-edition","text":"Python is a mature language, but like every programming language it continues to evolve. The third edition incorporates the most important new features in Python, without becoming bloated by trying to include every new feature that's been introduced in recent years. The new edition uses the latest versions of all third-party libraries in the projects section.","title":"What's new in the third edition?"},{"location":"new_in_3e/#overall-changes","text":"Here's a summary of the changes that have been made to the book overall: The third edition uses Python 3.11. (The second edition was written using Python 3.7.) The new edition uses VS Code instead of Sublime Text. VS Code is fully open, and has seen widespread adoption in the Python world over the last several years. Code listings are less cluttered and easier to follow throughout the book. The new edition uses updated libraries throughout, and updated workflows for each library.","title":"Overall changes"},{"location":"new_in_3e/#specific-changes","text":"","title":"Specific changes"},{"location":"new_in_3e/#chapter-1","text":"In the setup section, VS Code is recommended as a text editor for readers who don't already have a preference. (You can use any editor that's properly configured to run Python code.)","title":"Chapter 1"},{"location":"new_in_3e/#chapter-2","text":"This chapter introduces removeprefix() and removesuffix() , two new methods that are helpful when working with files and URLs. Chapter 2 also includes Python's newly-improved error messages, which provide much more specific information to help you troubleshoot your code when something goes wrong.","title":"Chapter 2"},{"location":"new_in_3e/#chapters-3-9","text":"Many explanations have been clarified, and code listings have been simplified. (There were some annotations in shorter listings that weren't really necessary.)","title":"Chapters 3-9"},{"location":"new_in_3e/#chapter-10","text":"Chapter 10 uses the pathlib module for working with files. This is a much simpler approach to reading from and writing to files. It's also in keeping with how most major libraries are working with files now.","title":"Chapter 10"},{"location":"new_in_3e/#chapter-11","text":"pytest is now the main testing library in the Python world. It's accessible to beginners, but powerful enough to serve professional testing needs as well. Chapter 11 now uses pytest instead of the standard library's unittest . This chapter shows how to install third-party libraries, instead of introducing the topic in several different projects in the second half of the book.","title":"Chapter 11"},{"location":"new_in_3e/#alien-invasion-chapters-12-14","text":"The game uses an FPS (frames per second) setting, to make it run more consistently across all systems. The approach to building the alien fleet is simpler and easier to understand. The code listings throughout the project are presented in an order that's easier to follow.","title":"Alien Invasion (Chapters 12-14)"},{"location":"new_in_3e/#data-visualization-chapters-15-17","text":"Matplotlib has changed some of its default style settings; all figures in the new edition match the current default styles. Plotly has introduced Plotly Express, a module that focuses on building an initial plot quickly, and then making styling choices. The third edition uses this new approach. The random walk project has a small improvement that increases the accuracy of the plots; you'll see a wider variety of patterns emerge each time you generate a new walk. The weather and earthquake projects use updated data sets. The GitHub data used in Chapter 17 is fully updated.","title":"Data Visualization (Chapters 15-17)"},{"location":"new_in_3e/#web-applications-chapters-18-20","text":"The Learning Log project is built using Django 4.1, and the project is styled using Bootstrap 5. Some parts of the project have been renamed to make it easier to understand the overall layout of a Django project. The deployment section has been updated. The project is now deployed to Platform.sh, a modern hosting service for Django projects. The deployment process is controlled by YAML configuration files, which give you a great deal of control over how your project is deployed. This approach is consistent with how professional programmers deploy modern Django projects.","title":"Web Applications (Chapters 18-20)"},{"location":"new_in_3e/#appendices","text":"Appendix A includes updated supplementary installation and setup instructions, for readers who run into any issues installing Python. Appendix B discusses customizations you can make to VS Code to make it more useful for writing and maintaining Python code. It also includes a number of shortcuts you can use to work more efficiently in VS Code. Appendix C includes an updated set of resources for getting help online. Appendix D uses the new git restore command for rolling back changes in a project, and the git switch command for getting back to the main branch in a project. Appendix E, which is entirely new, expands on the deployment process for web applications. Deployment is a complex process when it doesn't go perfectly. This appendix provides some guidance on how to troubleshoot deployments when they don't work the first time you try them.","title":"Appendices"},{"location":"new_in_3e/#index","text":"The new edition has been entirely re-indexed, to help you find what you need quickly after you've worked through the book.","title":"Index"},{"location":"setup_instructions/","text":"Setup Instructions Setup instructions are included in the book, but sometimes it\u2019s easier to follow online instructions with active links. The sections here also include more screenshots than what can be shown in the book.","title":"Setup Instructions"},{"location":"setup_instructions/#setup-instructions","text":"Setup instructions are included in the book, but sometimes it\u2019s easier to follow online instructions with active links. The sections here also include more screenshots than what can be shown in the book.","title":"Setup Instructions"},{"location":"setup_instructions/configuring_vs_code/","text":"Configuring VS Code VS Code is a great text editor, with some features that you'd typically see in an IDE. There are some helpful recommendations for configuring VS Code and using it efficiently in Appendix B. This section shows some of those same configuration steps, with more screenshots. Simplifying output By default, VS Code displays output in an integrated terminal . This is a terminal window that's embedded within the VS Code application. It's nice because you don't have to have a separate terminal window open to see your output, but it can be confusing because it displays a lot more information than you might want to see when you're running your first programs. For example, here's what VS Code looks like when you run hello_world.py : The output we're really interested in is the single line Hello Python world! The rest of the output shows where the file is being saved, and the path to the Python interpreter that's being used to run the program. At this point you probably just want to see the output of your program. To see just the output, do the following: Close all open tabs in VS Code, and quit VS Code. Launch VS Code again and open the folder that contains the Python files you're working on. Click the Run/ Debug icon: Click Create a launch.json File , and select the Python File option: In the configurations section, change the console setting from integratedTerminal to internalConsole : launch.json { ... \"configurations\" : [ { \"name\" : \"Python: Current File\" , \"type\" : \"python\" , \"request\" : \"launch\" , \"program\" : \"${file}\" , \"console\" : \"internalConsole\" } ] } Now, run your .py file again and click on the Debug Console tab in the bottom pane. You should see just your program's output: Running programs that use input() If you made the above change to display output in the Debug Console instead of the integrated terminal window, you won't be able to run programs that use the input() function. The Debug Console is read-only, which means it doesn't accept input. When you're running programs using the input() function, which is introduced in Chapter 7, you'll need to switch back to using the integrated terminal. To do this, open the launch.json file that you created earlier, and change internalConsole back to integratedTerminal : launch.json { ... \"configurations\" : [ { \"name\" : \"Python: Current File\" , \"type\" : \"python\" , \"request\" : \"launch\" , \"program\" : \"${file}\" , \"console\" : \"integratedTerminal\" } ] } Switching between the editor and the terminal When you're running programs that use input() , you'll need to switch between the editor pane where you're typing code, and the terminal where you'll enter input. You can use a mouse or a trackpad, but there's a keyboard shortcut that's really helpful. When you're finished entering code in the editor pane, press Ctrl-F5 to run your program. You'll see a prompt in the terminal pane where you can enter the input for the program. Press Ctrl-` (Control-backtick) to switch from the editor pane to the terminal pane. When you're finished entering input, press Ctrl-` again to move the cursor back to the editor window.","title":"Configuring VS Code"},{"location":"setup_instructions/configuring_vs_code/#configuring-vs-code","text":"VS Code is a great text editor, with some features that you'd typically see in an IDE. There are some helpful recommendations for configuring VS Code and using it efficiently in Appendix B. This section shows some of those same configuration steps, with more screenshots.","title":"Configuring VS Code"},{"location":"setup_instructions/configuring_vs_code/#simplifying-output","text":"By default, VS Code displays output in an integrated terminal . This is a terminal window that's embedded within the VS Code application. It's nice because you don't have to have a separate terminal window open to see your output, but it can be confusing because it displays a lot more information than you might want to see when you're running your first programs. For example, here's what VS Code looks like when you run hello_world.py : The output we're really interested in is the single line Hello Python world! The rest of the output shows where the file is being saved, and the path to the Python interpreter that's being used to run the program. At this point you probably just want to see the output of your program. To see just the output, do the following: Close all open tabs in VS Code, and quit VS Code. Launch VS Code again and open the folder that contains the Python files you're working on. Click the Run/ Debug icon: Click Create a launch.json File , and select the Python File option: In the configurations section, change the console setting from integratedTerminal to internalConsole : launch.json { ... \"configurations\" : [ { \"name\" : \"Python: Current File\" , \"type\" : \"python\" , \"request\" : \"launch\" , \"program\" : \"${file}\" , \"console\" : \"internalConsole\" } ] } Now, run your .py file again and click on the Debug Console tab in the bottom pane. You should see just your program's output:","title":"Simplifying output"},{"location":"setup_instructions/configuring_vs_code/#running-programs-that-use-input","text":"If you made the above change to display output in the Debug Console instead of the integrated terminal window, you won't be able to run programs that use the input() function. The Debug Console is read-only, which means it doesn't accept input. When you're running programs using the input() function, which is introduced in Chapter 7, you'll need to switch back to using the integrated terminal. To do this, open the launch.json file that you created earlier, and change internalConsole back to integratedTerminal : launch.json { ... \"configurations\" : [ { \"name\" : \"Python: Current File\" , \"type\" : \"python\" , \"request\" : \"launch\" , \"program\" : \"${file}\" , \"console\" : \"integratedTerminal\" } ] }","title":"Running programs that use input()"},{"location":"setup_instructions/configuring_vs_code/#switching-between-the-editor-and-the-terminal","text":"When you're running programs that use input() , you'll need to switch between the editor pane where you're typing code, and the terminal where you'll enter input. You can use a mouse or a trackpad, but there's a keyboard shortcut that's really helpful. When you're finished entering code in the editor pane, press Ctrl-F5 to run your program. You'll see a prompt in the terminal pane where you can enter the input for the program. Press Ctrl-` (Control-backtick) to switch from the editor pane to the terminal pane. When you're finished entering input, press Ctrl-` again to move the cursor back to the editor window.","title":"Switching between the editor and the terminal"},{"location":"solutions/","text":"Solutions Solutions for selected exercises from each chapter can be found below. Be careful about looking at the solutions too quickly; make sure you've given yourself time to wrestle with the concepts you just learned before looking at a solution. Also, there are several ways to solve many of the exercises, and the solutions only show one possible way to complete each exercise. I haven't included solutions for Chapters 18-20, because the exercises for those chapters are really projects in themselves. If you're having trouble with an exercise from one of those chapters consider posting on Stack Overflow , r/learnpython , or get in touch. Chapter 2 Chapter 3 Chapter 4 Chapter 5 Chapter 6 Chapter 7 Questions and Feedback If you're stuck on something and what you see here isn't helping, please feel free to get in touch. Also, if you think you've found a mistake in the book or in the online resources, I'd love to know about it! Email: ehmatthes@gmail.com Twitter: @ehmatthes Mastodon: @ehmatthes@fosstodon.org","title":"Solutions"},{"location":"solutions/#solutions","text":"Solutions for selected exercises from each chapter can be found below. Be careful about looking at the solutions too quickly; make sure you've given yourself time to wrestle with the concepts you just learned before looking at a solution. Also, there are several ways to solve many of the exercises, and the solutions only show one possible way to complete each exercise. I haven't included solutions for Chapters 18-20, because the exercises for those chapters are really projects in themselves. If you're having trouble with an exercise from one of those chapters consider posting on Stack Overflow , r/learnpython , or get in touch. Chapter 2 Chapter 3 Chapter 4 Chapter 5 Chapter 6 Chapter 7","title":"Solutions"},{"location":"solutions/#questions-and-feedback","text":"If you're stuck on something and what you see here isn't helping, please feel free to get in touch. Also, if you think you've found a mistake in the book or in the online resources, I'd love to know about it! Email: ehmatthes@gmail.com Twitter: @ehmatthes Mastodon: @ehmatthes@fosstodon.org","title":"Questions and Feedback"},{"location":"solutions/chapter_2/","text":"Solutions - Chapter 2 Back to solutions . 2-1: Simple Message Assign a message to a variable, and then print that message. simple_message.py msg = \"I love learning to use Python.\" print ( msg ) Output: I love learning to use Python. 2-2: Simple Messages Assign a message to a variable, and print that message. Then change the value of the variable to a new message, and print the new message. simple_messages.py msg = \"I love learning to use Python.\" print ( msg ) msg = \"It's really satisfying!\" print ( msg ) Output: I love learning to use Python. It's really satisfying! 2-3: Personal Message Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d personal_message.py name = \"eric\" msg = f \"Hello { name . title () } , would you like to learn some Python today?\" print ( msg ) Output: Hello Eric, would you like to learn some Python today? 2-4: Name Cases Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case. name_cases.py name = \"eric\" print ( name . lower ()) print ( name . upper ()) print ( name . title ()) Output: eric ERIC Eric 2-5: Famous Quote Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks: Albert Einstein once said, \"A person who never made a mistake never tried anything new.\" famous_quote.py print ( 'Albert Einstein once said, \"A person who never made a mistake' ) print ( 'never tried anything new.\"' ) Output: Albert Einstein once said, \"A person who never made a mistake never tried anything new.\" 2-6: Famous Quote 2 Repeat Exercise 2-5, but this time, represent the famous person\u2019s name using a variable called famous_person . Then compose your message and represent it with a new variable called message . Print your message. famous_quote_2.py famous_person = \"Albert Einstein\" message = f ' { famous_person } once said, \"A person who never made a mistake never tried anything new.\"' print ( message ) Output: Albert Einstein once said, \"A person who never made a mistake never tried anything new.\" Note The line that defines message in this file is longer than we'd typically like to write. You'll see this a little later in Chapter 7, but you can add to a string using the += operator. So this program could also be written like this, with exactly the same output: famous_quote_3.py famous_person = \"Albert Einstein\" message = f ' { famous_person } once said, \"A person who never made a mistake' message += ' never tried anything new.\"' print ( message ) 2-7: Stripping Names Use a variable to represent a person's name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\" , at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip() , rstrip() , and strip() . stripping_names.py name = \" \\t Eric Matthes \\n \" print ( \"Unmodified:\" ) print ( name ) print ( \" \\n Using lstrip():\" ) print ( name . lstrip ()) print ( \" \\n Using rstrip():\" ) print ( name . rstrip ()) print ( \" \\n Using strip():\" ) print ( name . strip ()) Output: Unmodified: Eric Matthes Using lstrip(): Eric Matthes Using rstrip(): Eric Matthes Using strip(): Eric Matthes 2-8: File Extensions Python has a removesuffix() method that works exactly like removeprefix() . Assign the value 'python_notes.txt' to a variable called filename . Then use the removesuffix() method to display the filename without the file extension, like some file browsers do. file_extensions.py filename = 'python_notes.txt' simple_filename = filename . removesuffix ( '.txt' ) print ( simple_filename ) Output: python_notes 2-10: Favorite Number Use a variable to represent your favorite number. Then, using that variable, create a message that reveals your favorite number. Print that message. favorite_number.py fav_num = 42 msg = f \"My favorite number is { fav_num } .\" print ( msg ) Output: My favorite number is 42.","title":"Chapter 2"},{"location":"solutions/chapter_2/#solutions-chapter-2","text":"Back to solutions .","title":"Solutions - Chapter 2"},{"location":"solutions/chapter_2/#2-1-simple-message","text":"Assign a message to a variable, and then print that message. simple_message.py msg = \"I love learning to use Python.\" print ( msg ) Output: I love learning to use Python.","title":"2-1: Simple Message"},{"location":"solutions/chapter_2/#2-2-simple-messages","text":"Assign a message to a variable, and print that message. Then change the value of the variable to a new message, and print the new message. simple_messages.py msg = \"I love learning to use Python.\" print ( msg ) msg = \"It's really satisfying!\" print ( msg ) Output: I love learning to use Python. It's really satisfying!","title":"2-2: Simple Messages"},{"location":"solutions/chapter_2/#2-3-personal-message","text":"Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d personal_message.py name = \"eric\" msg = f \"Hello { name . title () } , would you like to learn some Python today?\" print ( msg ) Output: Hello Eric, would you like to learn some Python today?","title":"2-3: Personal Message"},{"location":"solutions/chapter_2/#2-4-name-cases","text":"Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case. name_cases.py name = \"eric\" print ( name . lower ()) print ( name . upper ()) print ( name . title ()) Output: eric ERIC Eric","title":"2-4: Name Cases"},{"location":"solutions/chapter_2/#2-5-famous-quote","text":"Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks: Albert Einstein once said, \"A person who never made a mistake never tried anything new.\" famous_quote.py print ( 'Albert Einstein once said, \"A person who never made a mistake' ) print ( 'never tried anything new.\"' ) Output: Albert Einstein once said, \"A person who never made a mistake never tried anything new.\"","title":"2-5: Famous Quote"},{"location":"solutions/chapter_2/#2-6-famous-quote-2","text":"Repeat Exercise 2-5, but this time, represent the famous person\u2019s name using a variable called famous_person . Then compose your message and represent it with a new variable called message . Print your message. famous_quote_2.py famous_person = \"Albert Einstein\" message = f ' { famous_person } once said, \"A person who never made a mistake never tried anything new.\"' print ( message ) Output: Albert Einstein once said, \"A person who never made a mistake never tried anything new.\" Note The line that defines message in this file is longer than we'd typically like to write. You'll see this a little later in Chapter 7, but you can add to a string using the += operator. So this program could also be written like this, with exactly the same output: famous_quote_3.py famous_person = \"Albert Einstein\" message = f ' { famous_person } once said, \"A person who never made a mistake' message += ' never tried anything new.\"' print ( message )","title":"2-6: Famous Quote 2"},{"location":"solutions/chapter_2/#2-7-stripping-names","text":"Use a variable to represent a person's name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\" , at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip() , rstrip() , and strip() . stripping_names.py name = \" \\t Eric Matthes \\n \" print ( \"Unmodified:\" ) print ( name ) print ( \" \\n Using lstrip():\" ) print ( name . lstrip ()) print ( \" \\n Using rstrip():\" ) print ( name . rstrip ()) print ( \" \\n Using strip():\" ) print ( name . strip ()) Output: Unmodified: Eric Matthes Using lstrip(): Eric Matthes Using rstrip(): Eric Matthes Using strip(): Eric Matthes","title":"2-7: Stripping Names"},{"location":"solutions/chapter_2/#2-8-file-extensions","text":"Python has a removesuffix() method that works exactly like removeprefix() . Assign the value 'python_notes.txt' to a variable called filename . Then use the removesuffix() method to display the filename without the file extension, like some file browsers do. file_extensions.py filename = 'python_notes.txt' simple_filename = filename . removesuffix ( '.txt' ) print ( simple_filename ) Output: python_notes","title":"2-8: File Extensions"},{"location":"solutions/chapter_2/#2-10-favorite-number","text":"Use a variable to represent your favorite number. Then, using that variable, create a message that reveals your favorite number. Print that message. favorite_number.py fav_num = 42 msg = f \"My favorite number is { fav_num } .\" print ( msg ) Output: My favorite number is 42.","title":"2-10: Favorite Number"},{"location":"solutions/chapter_3/","text":"Solutions - Chapter 3 Back to solutions . 3-1: Names Store the names of a few of your friends in a list called names . Print each person's name by accessing each element in the list, one at a time. names.py names = [ 'ron' , 'tyler' , 'dani' ] print ( names [ 0 ]) print ( names [ 1 ]) print ( names [ 2 ]) Output: ron tyler dani 3-2: Greetings Start with the list you used in Exercise 3-1, but instead of just printing each person's name, print a message to them. The text of each message should be the same, but each message should be personalized with the person's name. greetings.py names = [ 'ron' , 'tyler' , 'dani' ] msg = f \"Hello, { names [ 0 ] . title () } !\" print ( msg ) msg = f \"Hello, { names [ 1 ] . title () } !\" print ( msg ) msg = f \"Hello, { names [ 2 ] . title () } !\" print ( msg ) Output: Hello, Ron! Hello, Tyler! Hello, Dani! 3-4: Guest List If you could invite anyone, living or deceased, to dinner, who would you invite? Make a list that includes at least three people you'd like to invite to dinner. Then use your list to print a message to each person, inviting them to dinner. guest_list.py guests = [ 'guido van rossum' , 'jack turner' , 'lynn hill' ] name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) Output: Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner. 3-5: Changing Guest List You just heard that one of your guests can't make the dinner, so you need to send out a new set of invitations. You'll have to think of someone else to invite. Start with your program from Exercise 3-4. Add a print() call at the end of your program, stating the name of the guest who can't make it. Modify your list, replacing the name of the guest who can't make it with the name of the new person you are inviting. Print a second set of invitation messages, one for each person who is still in your list. changing_guest_list.py # Invite some people to dinner. guests = [ 'guido van rossum' , 'jack turner' , 'lynn hill' ] name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" \\n Sorry, { name } can't make it to dinner.\" ) # Jack can't make it! Let's invite Gary instead. del ( guests [ 1 ]) guests . insert ( 1 , 'gary snyder' ) # Print the invitations again. name = guests [ 0 ] . title () print ( f \" \\n { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) Output: Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner. Sorry, Jack Turner can't make it to dinner. Guido Van Rossum, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. 3-6: More Guests You just found a bigger dinner table, so now more space is available. Think of three more guests to invite to dinner. Start with your program from Exercise 3-4 or Exercise 3-5. Add a print() call to the end of your program, informing people that you found a bigger dinner table. Use insert() to add one new guest to the beginning of your list. Use insert() to add one new guest to the middle of your list. Use append() to add one new guest to the end of your list. Print a new set of invitation messages, one for each person in your list. more_guests.py # Invite some people to dinner. guests = [ 'guido van rossum' , 'jack turner' , 'lynn hill' ] name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" \\n Sorry, { name } can't make it to dinner.\" ) # Jack can't make it! Let's invite Gary instead. del ( guests [ 1 ]) guests . insert ( 1 , 'gary snyder' ) # Print the invitations again. name = guests [ 0 ] . title () print ( f \" \\n { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) # We got a bigger table, so let's add some more people to the list. print ( \" \\n We got a bigger table!\" ) guests . insert ( 0 , 'frida kahlo' ) guests . insert ( 2 , 'reinhold messner' ) guests . append ( 'elizabeth peratrovich' ) name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 3 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 4 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 5 ] . title () print ( f \" { name } , please come to dinner.\" ) Output: Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner. Sorry, Jack Turner can't make it to dinner. Guido Van Rossum, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. We got a bigger table! Frida Kahlo, please come to dinner. Guido Van Rossum, please come to dinner. Reinhold Messner, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. Elizabeth Peratrovich, please come to dinner. 3-7: Shrinking Guest List You just found out that your new dinner table won't arrive in time for the dinner, and you have space for only two guests. Start with your program from Exercise 3-6. Add a new line that prints a message saying that you can invite only two people for dinner. Use pop() to remove guests from your list one at a time until only two names remain in your list. Each time you pop a name from your list, print a message to that person letting them know you're sorry you can't invite them to dinner. Print a message to each of the two people still on your list, letting them know they're still invited. Use del to remove the last two names from your list, so you have an empty list. Print your list to make sure you actually have an empty list at the end of your program. shrinking_guest_list.py # Invite some people to dinner. guests = [ 'guido van rossum' , 'jack turner' , 'lynn hill' ] name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" \\n Sorry, { name } can't make it to dinner.\" ) # Jack can't make it! Let's invite Gary instead. del ( guests [ 1 ]) guests . insert ( 1 , 'gary snyder' ) # Print the invitations again. name = guests [ 0 ] . title () print ( f \" \\n { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) # We got a bigger table, so let's add some more people to the list. print ( \" \\n We got a bigger table!\" ) guests . insert ( 0 , 'frida kahlo' ) guests . insert ( 2 , 'reinhold messner' ) guests . append ( 'elizabeth peratrovich' ) name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 3 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 4 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 5 ] . title () print ( f \" { name } , please come to dinner.\" ) # Oh no, the table won't arrive on time! print ( \" \\n Sorry, we can only invite two people to dinner.\" ) name = guests . pop () print ( f \"Sorry, { name . title () } there's no room at the table.\" ) name = guests . pop () print ( f \"Sorry, { name . title () } there's no room at the table.\" ) name = guests . pop () print ( f \"Sorry, { name . title () } there's no room at the table.\" ) name = guests . pop () print ( f \"Sorry, { name . title () } there's no room at the table.\" ) # There should be two people left. Let's invite them. name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) # Empty out the list. del ( guests [ 0 ]) del ( guests [ 0 ]) # Prove the list is empty. print ( guests ) Output: Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner. Sorry, Jack Turner can't make it to dinner. Guido Van Rossum, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. We got a bigger table! Frida Kahlo, please come to dinner. Guido Van Rossum, please come to dinner. Reinhold Messner, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. Elizabeth Peratrovich, please come to dinner. Sorry, we can only invite two people to dinner. Sorry, Elizabeth Peratrovich there's no room at the table. Sorry, Lynn Hill there's no room at the table. Sorry, Gary Snyder there's no room at the table. Sorry, Reinhold Messner there's no room at the table. Frida Kahlo, please come to dinner. Guido Van Rossum, please come to dinner. [] 3-8: Seeing the World Think of at least five places in the world you'd like to visit. Store the locations in a list. Make sure the list is not in alphabetical order. Print your list in its original order. Don't worry about printing the list neatly, just print it as a raw Python list. Use sorted() to print your list in alphabetical order without modifying the actual list. Show that your list is still in its original order by printing it. Use sorted() to print your list in reverse alphabetical order without changing the order of the original list. Show that your list is still in its original order by printing it again. Use reverse() to change the order of your list. Print the list to show that its order has changed. Use reverse() to change the order of your list again. Print the list to show it's back to its original order. Use sort() to change your list so it's stored in alphabetical order. Print the list to show that its order has been changed. Use sort() to change your list so it's stored in reverse alphabetical order. Print the list to show that its order has changed. seeing_the_world.py locations = [ 'himalaya' , 'andes' , 'tierra del fuego' , 'labrador' , 'guam' ] print ( \"Original order:\" ) print ( locations ) print ( \" \\n Alphabetical:\" ) print ( sorted ( locations )) print ( \" \\n Original order:\" ) print ( locations ) print ( \" \\n Reverse alphabetical:\" ) print ( sorted ( locations , reverse = True )) print ( \" \\n Original order:\" ) print ( locations ) print ( \" \\n Reversed:\" ) locations . reverse () print ( locations ) print ( \" \\n Original order:\" ) locations . reverse () print ( locations ) print ( \" \\n Alphabetical\" ) locations . sort () print ( locations ) print ( \" \\n Reverse alphabetical\" ) locations . sort ( reverse = True ) print ( locations ) Output: Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Alphabetical: ['andes', 'guam', 'himalaya', 'labrador', 'tierra del fuego'] Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Reverse alphabetical: ['tierra del fuego', 'labrador', 'himalaya', 'guam', 'andes'] Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Reversed: ['guam', 'labrador', 'tierra del fuego', 'andes', 'himalaya'] Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Alphabetical ['andes', 'guam', 'himalaya', 'labrador', 'tierra del fuego'] Reverse alphabetical ['tierra del fuego', 'labrador', 'himalaya', 'guam', 'andes']","title":"Chapter 3"},{"location":"solutions/chapter_3/#solutions-chapter-3","text":"Back to solutions .","title":"Solutions - Chapter 3"},{"location":"solutions/chapter_3/#3-1-names","text":"Store the names of a few of your friends in a list called names . Print each person's name by accessing each element in the list, one at a time. names.py names = [ 'ron' , 'tyler' , 'dani' ] print ( names [ 0 ]) print ( names [ 1 ]) print ( names [ 2 ]) Output: ron tyler dani","title":"3-1: Names"},{"location":"solutions/chapter_3/#3-2-greetings","text":"Start with the list you used in Exercise 3-1, but instead of just printing each person's name, print a message to them. The text of each message should be the same, but each message should be personalized with the person's name. greetings.py names = [ 'ron' , 'tyler' , 'dani' ] msg = f \"Hello, { names [ 0 ] . title () } !\" print ( msg ) msg = f \"Hello, { names [ 1 ] . title () } !\" print ( msg ) msg = f \"Hello, { names [ 2 ] . title () } !\" print ( msg ) Output: Hello, Ron! Hello, Tyler! Hello, Dani!","title":"3-2: Greetings"},{"location":"solutions/chapter_3/#3-4-guest-list","text":"If you could invite anyone, living or deceased, to dinner, who would you invite? Make a list that includes at least three people you'd like to invite to dinner. Then use your list to print a message to each person, inviting them to dinner. guest_list.py guests = [ 'guido van rossum' , 'jack turner' , 'lynn hill' ] name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) Output: Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner.","title":"3-4: Guest List"},{"location":"solutions/chapter_3/#3-5-changing-guest-list","text":"You just heard that one of your guests can't make the dinner, so you need to send out a new set of invitations. You'll have to think of someone else to invite. Start with your program from Exercise 3-4. Add a print() call at the end of your program, stating the name of the guest who can't make it. Modify your list, replacing the name of the guest who can't make it with the name of the new person you are inviting. Print a second set of invitation messages, one for each person who is still in your list. changing_guest_list.py # Invite some people to dinner. guests = [ 'guido van rossum' , 'jack turner' , 'lynn hill' ] name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" \\n Sorry, { name } can't make it to dinner.\" ) # Jack can't make it! Let's invite Gary instead. del ( guests [ 1 ]) guests . insert ( 1 , 'gary snyder' ) # Print the invitations again. name = guests [ 0 ] . title () print ( f \" \\n { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) Output: Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner. Sorry, Jack Turner can't make it to dinner. Guido Van Rossum, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner.","title":"3-5: Changing Guest List"},{"location":"solutions/chapter_3/#3-6-more-guests","text":"You just found a bigger dinner table, so now more space is available. Think of three more guests to invite to dinner. Start with your program from Exercise 3-4 or Exercise 3-5. Add a print() call to the end of your program, informing people that you found a bigger dinner table. Use insert() to add one new guest to the beginning of your list. Use insert() to add one new guest to the middle of your list. Use append() to add one new guest to the end of your list. Print a new set of invitation messages, one for each person in your list. more_guests.py # Invite some people to dinner. guests = [ 'guido van rossum' , 'jack turner' , 'lynn hill' ] name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" \\n Sorry, { name } can't make it to dinner.\" ) # Jack can't make it! Let's invite Gary instead. del ( guests [ 1 ]) guests . insert ( 1 , 'gary snyder' ) # Print the invitations again. name = guests [ 0 ] . title () print ( f \" \\n { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) # We got a bigger table, so let's add some more people to the list. print ( \" \\n We got a bigger table!\" ) guests . insert ( 0 , 'frida kahlo' ) guests . insert ( 2 , 'reinhold messner' ) guests . append ( 'elizabeth peratrovich' ) name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 3 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 4 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 5 ] . title () print ( f \" { name } , please come to dinner.\" ) Output: Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner. Sorry, Jack Turner can't make it to dinner. Guido Van Rossum, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. We got a bigger table! Frida Kahlo, please come to dinner. Guido Van Rossum, please come to dinner. Reinhold Messner, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. Elizabeth Peratrovich, please come to dinner.","title":"3-6: More Guests"},{"location":"solutions/chapter_3/#3-7-shrinking-guest-list","text":"You just found out that your new dinner table won't arrive in time for the dinner, and you have space for only two guests. Start with your program from Exercise 3-6. Add a new line that prints a message saying that you can invite only two people for dinner. Use pop() to remove guests from your list one at a time until only two names remain in your list. Each time you pop a name from your list, print a message to that person letting them know you're sorry you can't invite them to dinner. Print a message to each of the two people still on your list, letting them know they're still invited. Use del to remove the last two names from your list, so you have an empty list. Print your list to make sure you actually have an empty list at the end of your program. shrinking_guest_list.py # Invite some people to dinner. guests = [ 'guido van rossum' , 'jack turner' , 'lynn hill' ] name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" \\n Sorry, { name } can't make it to dinner.\" ) # Jack can't make it! Let's invite Gary instead. del ( guests [ 1 ]) guests . insert ( 1 , 'gary snyder' ) # Print the invitations again. name = guests [ 0 ] . title () print ( f \" \\n { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) # We got a bigger table, so let's add some more people to the list. print ( \" \\n We got a bigger table!\" ) guests . insert ( 0 , 'frida kahlo' ) guests . insert ( 2 , 'reinhold messner' ) guests . append ( 'elizabeth peratrovich' ) name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 2 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 3 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 4 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 5 ] . title () print ( f \" { name } , please come to dinner.\" ) # Oh no, the table won't arrive on time! print ( \" \\n Sorry, we can only invite two people to dinner.\" ) name = guests . pop () print ( f \"Sorry, { name . title () } there's no room at the table.\" ) name = guests . pop () print ( f \"Sorry, { name . title () } there's no room at the table.\" ) name = guests . pop () print ( f \"Sorry, { name . title () } there's no room at the table.\" ) name = guests . pop () print ( f \"Sorry, { name . title () } there's no room at the table.\" ) # There should be two people left. Let's invite them. name = guests [ 0 ] . title () print ( f \" { name } , please come to dinner.\" ) name = guests [ 1 ] . title () print ( f \" { name } , please come to dinner.\" ) # Empty out the list. del ( guests [ 0 ]) del ( guests [ 0 ]) # Prove the list is empty. print ( guests ) Output: Guido Van Rossum, please come to dinner. Jack Turner, please come to dinner. Lynn Hill, please come to dinner. Sorry, Jack Turner can't make it to dinner. Guido Van Rossum, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. We got a bigger table! Frida Kahlo, please come to dinner. Guido Van Rossum, please come to dinner. Reinhold Messner, please come to dinner. Gary Snyder, please come to dinner. Lynn Hill, please come to dinner. Elizabeth Peratrovich, please come to dinner. Sorry, we can only invite two people to dinner. Sorry, Elizabeth Peratrovich there's no room at the table. Sorry, Lynn Hill there's no room at the table. Sorry, Gary Snyder there's no room at the table. Sorry, Reinhold Messner there's no room at the table. Frida Kahlo, please come to dinner. Guido Van Rossum, please come to dinner. []","title":"3-7: Shrinking Guest List"},{"location":"solutions/chapter_3/#3-8-seeing-the-world","text":"Think of at least five places in the world you'd like to visit. Store the locations in a list. Make sure the list is not in alphabetical order. Print your list in its original order. Don't worry about printing the list neatly, just print it as a raw Python list. Use sorted() to print your list in alphabetical order without modifying the actual list. Show that your list is still in its original order by printing it. Use sorted() to print your list in reverse alphabetical order without changing the order of the original list. Show that your list is still in its original order by printing it again. Use reverse() to change the order of your list. Print the list to show that its order has changed. Use reverse() to change the order of your list again. Print the list to show it's back to its original order. Use sort() to change your list so it's stored in alphabetical order. Print the list to show that its order has been changed. Use sort() to change your list so it's stored in reverse alphabetical order. Print the list to show that its order has changed. seeing_the_world.py locations = [ 'himalaya' , 'andes' , 'tierra del fuego' , 'labrador' , 'guam' ] print ( \"Original order:\" ) print ( locations ) print ( \" \\n Alphabetical:\" ) print ( sorted ( locations )) print ( \" \\n Original order:\" ) print ( locations ) print ( \" \\n Reverse alphabetical:\" ) print ( sorted ( locations , reverse = True )) print ( \" \\n Original order:\" ) print ( locations ) print ( \" \\n Reversed:\" ) locations . reverse () print ( locations ) print ( \" \\n Original order:\" ) locations . reverse () print ( locations ) print ( \" \\n Alphabetical\" ) locations . sort () print ( locations ) print ( \" \\n Reverse alphabetical\" ) locations . sort ( reverse = True ) print ( locations ) Output: Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Alphabetical: ['andes', 'guam', 'himalaya', 'labrador', 'tierra del fuego'] Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Reverse alphabetical: ['tierra del fuego', 'labrador', 'himalaya', 'guam', 'andes'] Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Reversed: ['guam', 'labrador', 'tierra del fuego', 'andes', 'himalaya'] Original order: ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam'] Alphabetical ['andes', 'guam', 'himalaya', 'labrador', 'tierra del fuego'] Reverse alphabetical ['tierra del fuego', 'labrador', 'himalaya', 'guam', 'andes']","title":"3-8: Seeing the World"},{"location":"solutions/chapter_4/","text":"Solutions - Chapter 4 Back to solutions . 4-1: Pizzas Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza. Modify your for loop to print a sentence using the name of the pizza, instead of printing just the name of the pizza. For each pizza, you should have one line of output containing a simple statement like I like pepperoni pizza. Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza! pizzas.py favorite_pizzas = [ 'pepperoni' , 'hawaiian' , 'veggie' ] # Print the names of all the pizzas. for pizza in favorite_pizzas : print ( pizza ) print ( \" \\n \" ) # Print a sentence about each pizza. for pizza in favorite_pizzas : print ( f \"I really love { pizza } pizza!\" ) print ( \" \\n I really love pizza!\" ) Output: pepperoni hawaiian veggie I really love pepperoni pizza! I really love hawaiian pizza! I really love veggie pizza! I really love pizza! 4-2: Animals Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal. - Modify your program to print a statement about each animal, such as A dog would make a great pet. - Add a line at the end of your program, stating what these animals have in common. You could print a sentence, such as Any of these animals would make a great pet! animals.py animals = [ \"spider monkey\" , \"lemur\" , \"giraffe\" ] # Print each animal. for animal in animals : print ( animal ) print ( \" \\n \" ) # Print a statement about each animal. for animal in animals : print ( f \"A { animal } has a long tail.\" ) print ( \" \\n All of these animals have long tails.\" ) Output: spider monkey lemur giraffe A spider monkey has a long tail. A lemur has a long tail. A giraffe has a long tail. All of these animals have long tails. 4-3: Counting to Twenty Use a for loop to print the numbers from 1 to 20, inclusive. counting_to_twenty.py numbers = list ( range ( 1 , 21 )) for number in numbers : print ( number ) Output: 1 2 3 ... 18 19 20 4-5: Summing a Million Make a list of the numbers from one to one million, and then use min() and max() to make sure your list actually starts at one and ends at one million. Also, use the sum() function to see how quickly Python can add a million numbers. summing_a_million.py numbers = list ( range ( 1 , 1_000_001 )) print ( min ( numbers )) print ( max ( numbers )) print ( sum ( numbers )) Output: 1 1000000 500000500000 4-6: Odd Numbers Use the third argument of the range() function to make a list of the odd numbers from 1 to 20. Use a for loop to print each number. odd_numbers.py odd_numbers = list ( range ( 1 , 20 , 2 )) for number in odd_numbers : print ( number ) Output: 1 3 5 ... 15 17 19 4-7: Threes Make a list of the multiples of 3 from 3 to 30. Use a for loop to print the numbers in your list. threes.py threes = list ( range ( 3 , 31 , 3 )) for number in threes : print ( number ) Output: 3 6 9 ... 24 27 30 4-8: Cubes A number raised to the third power is called a cube . For example, the cube of 2 is written as 2**3 in Python. Make a list of the first 10 cubes (that is, the cube of each integer from 1 through 10), and use a for loop to print out the value of each cube. cubes.py cubes = [] for number in range ( 1 , 11 ): cube = number ** 3 cubes . append ( cube ) for cube in cubes : print ( cube ) Output: 1 8 27 ... 512 729 1000 4-9: Cube Comprehension Use a list comprehension to generate a list of the first 10 cubes. cube_comprehension.py cubes = [ number ** 3 for number in range ( 1 , 11 )] for cube in cubes : print ( cube ) Output: 1 8 27 ... 512 729 1000 4-11: My Pizzas, Your Pizzas Start with your program from Exercise 4-1 (page 56). Make a copy of the list of pizzas, and call it friend_pizzas . Then, do the following: Add a new pizza to the original list. Add a different pizza to the list friend_pizzas . Prove that you have two separate lists. Print the message, My favorite pizzas are: , and then use a for loop to print the first list. Print the message, My friend's favorite pizzas are: , and then use a for loop to print the second list. Make sure each new pizza is stored in the appropriate list. my_pizzas_your_pizzas.py favorite_pizzas = [ 'pepperoni' , 'hawaiian' , 'veggie' ] friend_pizzas = favorite_pizzas [:] favorite_pizzas . append ( \"meat lover's\" ) friend_pizzas . append ( 'pesto' ) print ( \"My favorite pizzas are:\" ) for pizza in favorite_pizzas : print ( f \"- { pizza } \" ) print ( \" \\n My friend's favorite pizzas are:\" ) for pizza in friend_pizzas : print ( f \"- { pizza } \" ) Output: My favorite pizzas are: - pepperoni - hawaiian - veggie - meat lover's My friend's favorite pizzas are: - pepperoni - hawaiian - veggie - pesto 4-12: More Loops All versions of foods.py in this section have avoided using for loops when printing, to save space. Choose a version of foods.py , and write two for loops to print each list of foods. more_loops.py my_foods = [ 'pizza' , 'falafel' , 'carrot cake' ] friend_foods = my_foods [:] my_foods . append ( 'cannoli' ) friend_foods . append ( 'ice cream' ) print ( \"My favorite foods are:\" ) for food in my_foods : print ( f \"- { food } \" ) print ( \" \\n My friend's favorite foods are:\" ) for food in friend_foods : print ( f \"- { food } \" ) Output: My favorite foods are: - pizza - falafel - carrot cake - cannoli My friend's favorite foods are: - pizza - falafel - carrot cake - ice cream 4-13: Buffet A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple. Use a for loop to print each food the restaurant offers. Try to modify one of the items, and make sure that Python rejects the change. The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu. buffet.py menu_items = ( 'rockfish sandwich' , 'halibut nuggets' , 'smoked salmon chowder' , 'salmon burger' , 'crab cakes' , ) print ( \"You can choose from the following menu items:\" ) for item in menu_items : print ( f \"- { item } \" ) menu_items = ( 'rockfish sandwich' , 'halibut nuggets' , 'smoked salmon chowder' , 'black cod tips' , 'king crab legs' , ) print ( \" \\n Our menu has been updated.\" ) print ( \"You can now choose from the following items:\" ) for item in menu_items : print ( f \"- { item } \" ) Output: You can choose from the following menu items: - rockfish sandwich - halibut nuggets - smoked salmon chowder - salmon burger - crab cakes Our menu has been updated. You can now choose from the following items: - rockfish sandwich - halibut nuggets - smoked salmon chowder - black cod tips - king crab legs","title":"Chapter 4"},{"location":"solutions/chapter_4/#solutions-chapter-4","text":"Back to solutions .","title":"Solutions - Chapter 4"},{"location":"solutions/chapter_4/#4-1-pizzas","text":"Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza. Modify your for loop to print a sentence using the name of the pizza, instead of printing just the name of the pizza. For each pizza, you should have one line of output containing a simple statement like I like pepperoni pizza. Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza! pizzas.py favorite_pizzas = [ 'pepperoni' , 'hawaiian' , 'veggie' ] # Print the names of all the pizzas. for pizza in favorite_pizzas : print ( pizza ) print ( \" \\n \" ) # Print a sentence about each pizza. for pizza in favorite_pizzas : print ( f \"I really love { pizza } pizza!\" ) print ( \" \\n I really love pizza!\" ) Output: pepperoni hawaiian veggie I really love pepperoni pizza! I really love hawaiian pizza! I really love veggie pizza! I really love pizza!","title":"4-1: Pizzas"},{"location":"solutions/chapter_4/#4-2-animals","text":"Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal. - Modify your program to print a statement about each animal, such as A dog would make a great pet. - Add a line at the end of your program, stating what these animals have in common. You could print a sentence, such as Any of these animals would make a great pet! animals.py animals = [ \"spider monkey\" , \"lemur\" , \"giraffe\" ] # Print each animal. for animal in animals : print ( animal ) print ( \" \\n \" ) # Print a statement about each animal. for animal in animals : print ( f \"A { animal } has a long tail.\" ) print ( \" \\n All of these animals have long tails.\" ) Output: spider monkey lemur giraffe A spider monkey has a long tail. A lemur has a long tail. A giraffe has a long tail. All of these animals have long tails.","title":"4-2: Animals"},{"location":"solutions/chapter_4/#4-3-counting-to-twenty","text":"Use a for loop to print the numbers from 1 to 20, inclusive. counting_to_twenty.py numbers = list ( range ( 1 , 21 )) for number in numbers : print ( number ) Output: 1 2 3 ... 18 19 20","title":"4-3: Counting to Twenty"},{"location":"solutions/chapter_4/#4-5-summing-a-million","text":"Make a list of the numbers from one to one million, and then use min() and max() to make sure your list actually starts at one and ends at one million. Also, use the sum() function to see how quickly Python can add a million numbers. summing_a_million.py numbers = list ( range ( 1 , 1_000_001 )) print ( min ( numbers )) print ( max ( numbers )) print ( sum ( numbers )) Output: 1 1000000 500000500000","title":"4-5: Summing a Million"},{"location":"solutions/chapter_4/#4-6-odd-numbers","text":"Use the third argument of the range() function to make a list of the odd numbers from 1 to 20. Use a for loop to print each number. odd_numbers.py odd_numbers = list ( range ( 1 , 20 , 2 )) for number in odd_numbers : print ( number ) Output: 1 3 5 ... 15 17 19","title":"4-6: Odd Numbers"},{"location":"solutions/chapter_4/#4-7-threes","text":"Make a list of the multiples of 3 from 3 to 30. Use a for loop to print the numbers in your list. threes.py threes = list ( range ( 3 , 31 , 3 )) for number in threes : print ( number ) Output: 3 6 9 ... 24 27 30","title":"4-7: Threes"},{"location":"solutions/chapter_4/#4-8-cubes","text":"A number raised to the third power is called a cube . For example, the cube of 2 is written as 2**3 in Python. Make a list of the first 10 cubes (that is, the cube of each integer from 1 through 10), and use a for loop to print out the value of each cube. cubes.py cubes = [] for number in range ( 1 , 11 ): cube = number ** 3 cubes . append ( cube ) for cube in cubes : print ( cube ) Output: 1 8 27 ... 512 729 1000","title":"4-8: Cubes"},{"location":"solutions/chapter_4/#4-9-cube-comprehension","text":"Use a list comprehension to generate a list of the first 10 cubes. cube_comprehension.py cubes = [ number ** 3 for number in range ( 1 , 11 )] for cube in cubes : print ( cube ) Output: 1 8 27 ... 512 729 1000","title":"4-9: Cube Comprehension"},{"location":"solutions/chapter_4/#4-11-my-pizzas-your-pizzas","text":"Start with your program from Exercise 4-1 (page 56). Make a copy of the list of pizzas, and call it friend_pizzas . Then, do the following: Add a new pizza to the original list. Add a different pizza to the list friend_pizzas . Prove that you have two separate lists. Print the message, My favorite pizzas are: , and then use a for loop to print the first list. Print the message, My friend's favorite pizzas are: , and then use a for loop to print the second list. Make sure each new pizza is stored in the appropriate list. my_pizzas_your_pizzas.py favorite_pizzas = [ 'pepperoni' , 'hawaiian' , 'veggie' ] friend_pizzas = favorite_pizzas [:] favorite_pizzas . append ( \"meat lover's\" ) friend_pizzas . append ( 'pesto' ) print ( \"My favorite pizzas are:\" ) for pizza in favorite_pizzas : print ( f \"- { pizza } \" ) print ( \" \\n My friend's favorite pizzas are:\" ) for pizza in friend_pizzas : print ( f \"- { pizza } \" ) Output: My favorite pizzas are: - pepperoni - hawaiian - veggie - meat lover's My friend's favorite pizzas are: - pepperoni - hawaiian - veggie - pesto","title":"4-11: My Pizzas, Your Pizzas"},{"location":"solutions/chapter_4/#4-12-more-loops","text":"All versions of foods.py in this section have avoided using for loops when printing, to save space. Choose a version of foods.py , and write two for loops to print each list of foods. more_loops.py my_foods = [ 'pizza' , 'falafel' , 'carrot cake' ] friend_foods = my_foods [:] my_foods . append ( 'cannoli' ) friend_foods . append ( 'ice cream' ) print ( \"My favorite foods are:\" ) for food in my_foods : print ( f \"- { food } \" ) print ( \" \\n My friend's favorite foods are:\" ) for food in friend_foods : print ( f \"- { food } \" ) Output: My favorite foods are: - pizza - falafel - carrot cake - cannoli My friend's favorite foods are: - pizza - falafel - carrot cake - ice cream","title":"4-12: More Loops"},{"location":"solutions/chapter_4/#4-13-buffet","text":"A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple. Use a for loop to print each food the restaurant offers. Try to modify one of the items, and make sure that Python rejects the change. The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu. buffet.py menu_items = ( 'rockfish sandwich' , 'halibut nuggets' , 'smoked salmon chowder' , 'salmon burger' , 'crab cakes' , ) print ( \"You can choose from the following menu items:\" ) for item in menu_items : print ( f \"- { item } \" ) menu_items = ( 'rockfish sandwich' , 'halibut nuggets' , 'smoked salmon chowder' , 'black cod tips' , 'king crab legs' , ) print ( \" \\n Our menu has been updated.\" ) print ( \"You can now choose from the following items:\" ) for item in menu_items : print ( f \"- { item } \" ) Output: You can choose from the following menu items: - rockfish sandwich - halibut nuggets - smoked salmon chowder - salmon burger - crab cakes Our menu has been updated. You can now choose from the following items: - rockfish sandwich - halibut nuggets - smoked salmon chowder - black cod tips - king crab legs","title":"4-13: Buffet"},{"location":"solutions/chapter_5/","text":"Solutions - Chapter 5 Back to solutions . 5-3: Alien Colors #1 Imagine an alien was just shot down in a game. Create a variable called alien_color and assign it a value of 'green' , 'yellow' , or 'red' . Write an if statement to test whether the alien's color is green. If it is, print a message that the player just earned 5 points. Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.) Passing version alien_colors_1.py alien_color = 'green' if alien_color == 'green' : print ( \"You just earned 5 points!\" ) Output: You just earned 5 points! Failing version alien_colors_1_fail.py alien_color = 'red' if alien_color == 'green' : print ( \"You just earned 5 points!\" ) (no output) 5-4: Alien Colors #2 Choose a color for an alien as you did in Exercise 5-3, and write an if-else chain. If the alien's color is green, print a statement that the player just earned 5 points for shooting the alien. If the alien's color isn't green, print a statement that the player just earned 10 points. Write one version of this program that runs the if block and another that runs the else block. if block runs alien_colors_2_if_block.py alien_color = 'green' if alien_color == 'green' : print ( \"You just earned 5 points!\" ) else : print ( \"You just earned 10 points!\" ) Output: You just earned 5 points! else block runs alien_colors_2_else_block.py alien_color = 'yellow' if alien_color == 'green' : print ( \"You just earned 5 points!\" ) else : print ( \"You just earned 10 points!\" ) Output: You just earned 10 points! 5-5: Alien Colors #3 Turn your if-else chain from Exercise 5-4 into an if-elif-else cahin. If the alien is green, print a message that the player earned 5 points. If the alien is yellow, print a message that the player earned 10 points. If the alien is red, print a message that the player earned 15 points. Write three versions of this program, making sure each message is printed for the appropriate color alien. alien_colors_3.py alien_color = 'red' if alien_color == 'green' : print ( \"You just earned 5 points!\" ) elif alien_color == 'yellow' : print ( \"You just earned 10 points!\" ) else : print ( \"You just earned 15 points!\" ) Output for 'red' alien: You just earned 15 points! 5-6: Stages of Life Write an if-elif-else chain that determines a person's stage of life. Set a value for the variable age , and then: If the person is less than 2 years old, print a message that the person is a baby. If the person is at least 2 years old but less than 4, print a message that the person is a toddler. If the person is at least 4 years old but less than 13, print a message that the person is a toddler. If the person is at least 13 years old but less than 20, print a message that the person is a toddler. If the person is at least 20 years old but less than 65, print a message that the person is a toddler. If the person is age 65 or older, print a message that the person is an elder. stages_of_life.py age = 17 if age < 2 : print ( \"You're a baby!\" ) elif age < 4 : print ( \"You're a toddler!\" ) elif age < 13 : print ( \"You're a kid!\" ) elif age < 20 : print ( \"You're a teenager!\" ) elif age < 65 : print ( \"You're an adult!\" ) else : print ( \"You're an elder!\" ) Output: You're a teenager! 5-7: Favorite Fruit Make a list of your favorite fruits, and then write a series of independent if statements that check for certain fruits in your list. Make a list of your three favorite fruits and call it favorite_fruits . Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas! favorite_fruits.py favorite_fruits = [ 'blueberries' , 'salmonberries' , 'peaches' ] if 'bananas' in favorite_fruits : print ( \"You really like bananas!\" ) if 'apples' in favorite_fruits : print ( \"You really like apples!\" ) if 'blueberries' in favorite_fruits : print ( \"You really like blueberries!\" ) if 'kiwis' in favorite_fruits : print ( \"You really like kiwis!\" ) if 'peaches' in favorite_fruits : print ( \"You really like peaches!\" ) Output: You really like blueberries! You really like peaches! 5-8: Hello Admin Make a list of five or more usernames, including the name 'admin' . Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user. If the username is 'admin' , print a special greeting, such as Hello admin, would you like to see a status report? Otherwise, print a generic greeting, such as Hello Jaden, thank you for loggin in again. hello_admin.py usernames = [ 'eric' , 'willie' , 'admin' , 'erin' , 'ever' ] for username in usernames : if username == 'admin' : print ( \"Hello admin, would you like to see a status report?\" ) else : print ( f \"Hello { username } , thank you for loggin in again!\" ) Output: Hello eric, thank you for logging in again! Hello willie, thank you for logging in again! Hello admin, would you like to see a status report? Hello erin, thank you for logging in again! Hello ever, thank you for logging in again! 5-9: No Users Add an if test to hello_admin.py to make sure the list of users is not empty. If the list is emtpy, print the message We need to find some users! Remove all of the usernames from your list, and make sure the correct message is printed. no_users.py usernames = [] if usernames : for username in usernames : if username == 'admin' : print ( \"Hello admin, would you like to see a status report?\" ) else : print ( f \"Hello { username } , thank you for loggin in again!\" ) else : print ( \"We need to find some users!\" ) Output: We need to find some users! 5-10: Checking Usernames Do the following to create a program that simulates how websites ensure that everyone has a unique username. Make a list of five or more usernames called current_users . Make another list of five usernames called new_users . Make sure one or two of the new usernames are also in the current_users list. Loop through the new_users list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available. Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you\u2019ll need to make a copy of current_users containing the lowercase versions of all existing users.) checking_usernames.py current_users = [ 'eric' , 'willie' , 'admin' , 'erin' , 'Ever' ] new_users = [ 'sarah' , 'Willie' , 'PHIL' , 'ever' , 'Iona' ] current_users_lower = [ user . lower () for user in current_users ] for new_user in new_users : if new_user . lower () in current_users_lower : print ( f \"Sorry { new_user } , that name is taken.\" ) else : print ( f \"Great, { new_user } is still available.\" ) Output: Great, sarah is still available. Sorry Willie, that name is taken. Great, PHIL is still available. Sorry ever, that name is taken. Great, Iona is still available. Note If you're not comfortable with list comprehensions yet, the list current_users_lower can be generated using a loop: current_users_lower = [] for user in current_users : current_users_lower . append ( user . lower ()) 5-11: Ordinal Numbers Ordinal numbers indicate their position in a list, such as 1st or 2nd . Most ordinal numbers end in th , except 1, 2, and 3. Store the numbers 1 through 9 in a list. Loop through the list. Use an if-elif-else chain inside the loop to print the proper ordinal ending for each number. Your output should read \"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\" , and each result should be on a separate line. ordinal_numbers.py numbers = list ( range ( 1 , 10 )) for number in numbers : if number == 1 : print ( \"1st\" ) elif number == 2 : print ( \"2nd\" ) elif number == 3 : print ( \"3rd\" ) else : print ( f \" { number } th\" ) Output: 1st 2nd 3rd 4th 5th 6th 7th 8th 9th","title":"Chapter 5"},{"location":"solutions/chapter_5/#solutions-chapter-5","text":"Back to solutions .","title":"Solutions - Chapter 5"},{"location":"solutions/chapter_5/#5-3-alien-colors-1","text":"Imagine an alien was just shot down in a game. Create a variable called alien_color and assign it a value of 'green' , 'yellow' , or 'red' . Write an if statement to test whether the alien's color is green. If it is, print a message that the player just earned 5 points. Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.)","title":"5-3: Alien Colors #1"},{"location":"solutions/chapter_5/#passing-version","text":"alien_colors_1.py alien_color = 'green' if alien_color == 'green' : print ( \"You just earned 5 points!\" ) Output: You just earned 5 points!","title":"Passing version"},{"location":"solutions/chapter_5/#failing-version","text":"alien_colors_1_fail.py alien_color = 'red' if alien_color == 'green' : print ( \"You just earned 5 points!\" ) (no output)","title":"Failing version"},{"location":"solutions/chapter_5/#5-4-alien-colors-2","text":"Choose a color for an alien as you did in Exercise 5-3, and write an if-else chain. If the alien's color is green, print a statement that the player just earned 5 points for shooting the alien. If the alien's color isn't green, print a statement that the player just earned 10 points. Write one version of this program that runs the if block and another that runs the else block.","title":"5-4: Alien Colors #2"},{"location":"solutions/chapter_5/#if-block-runs","text":"alien_colors_2_if_block.py alien_color = 'green' if alien_color == 'green' : print ( \"You just earned 5 points!\" ) else : print ( \"You just earned 10 points!\" ) Output: You just earned 5 points!","title":"if block runs"},{"location":"solutions/chapter_5/#else-block-runs","text":"alien_colors_2_else_block.py alien_color = 'yellow' if alien_color == 'green' : print ( \"You just earned 5 points!\" ) else : print ( \"You just earned 10 points!\" ) Output: You just earned 10 points!","title":"else block runs"},{"location":"solutions/chapter_5/#5-5-alien-colors-3","text":"Turn your if-else chain from Exercise 5-4 into an if-elif-else cahin. If the alien is green, print a message that the player earned 5 points. If the alien is yellow, print a message that the player earned 10 points. If the alien is red, print a message that the player earned 15 points. Write three versions of this program, making sure each message is printed for the appropriate color alien. alien_colors_3.py alien_color = 'red' if alien_color == 'green' : print ( \"You just earned 5 points!\" ) elif alien_color == 'yellow' : print ( \"You just earned 10 points!\" ) else : print ( \"You just earned 15 points!\" ) Output for 'red' alien: You just earned 15 points!","title":"5-5: Alien Colors #3"},{"location":"solutions/chapter_5/#5-6-stages-of-life","text":"Write an if-elif-else chain that determines a person's stage of life. Set a value for the variable age , and then: If the person is less than 2 years old, print a message that the person is a baby. If the person is at least 2 years old but less than 4, print a message that the person is a toddler. If the person is at least 4 years old but less than 13, print a message that the person is a toddler. If the person is at least 13 years old but less than 20, print a message that the person is a toddler. If the person is at least 20 years old but less than 65, print a message that the person is a toddler. If the person is age 65 or older, print a message that the person is an elder. stages_of_life.py age = 17 if age < 2 : print ( \"You're a baby!\" ) elif age < 4 : print ( \"You're a toddler!\" ) elif age < 13 : print ( \"You're a kid!\" ) elif age < 20 : print ( \"You're a teenager!\" ) elif age < 65 : print ( \"You're an adult!\" ) else : print ( \"You're an elder!\" ) Output: You're a teenager!","title":"5-6: Stages of Life"},{"location":"solutions/chapter_5/#5-7-favorite-fruit","text":"Make a list of your favorite fruits, and then write a series of independent if statements that check for certain fruits in your list. Make a list of your three favorite fruits and call it favorite_fruits . Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas! favorite_fruits.py favorite_fruits = [ 'blueberries' , 'salmonberries' , 'peaches' ] if 'bananas' in favorite_fruits : print ( \"You really like bananas!\" ) if 'apples' in favorite_fruits : print ( \"You really like apples!\" ) if 'blueberries' in favorite_fruits : print ( \"You really like blueberries!\" ) if 'kiwis' in favorite_fruits : print ( \"You really like kiwis!\" ) if 'peaches' in favorite_fruits : print ( \"You really like peaches!\" ) Output: You really like blueberries! You really like peaches!","title":"5-7: Favorite Fruit"},{"location":"solutions/chapter_5/#5-8-hello-admin","text":"Make a list of five or more usernames, including the name 'admin' . Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user. If the username is 'admin' , print a special greeting, such as Hello admin, would you like to see a status report? Otherwise, print a generic greeting, such as Hello Jaden, thank you for loggin in again. hello_admin.py usernames = [ 'eric' , 'willie' , 'admin' , 'erin' , 'ever' ] for username in usernames : if username == 'admin' : print ( \"Hello admin, would you like to see a status report?\" ) else : print ( f \"Hello { username } , thank you for loggin in again!\" ) Output: Hello eric, thank you for logging in again! Hello willie, thank you for logging in again! Hello admin, would you like to see a status report? Hello erin, thank you for logging in again! Hello ever, thank you for logging in again!","title":"5-8: Hello Admin"},{"location":"solutions/chapter_5/#5-9-no-users","text":"Add an if test to hello_admin.py to make sure the list of users is not empty. If the list is emtpy, print the message We need to find some users! Remove all of the usernames from your list, and make sure the correct message is printed. no_users.py usernames = [] if usernames : for username in usernames : if username == 'admin' : print ( \"Hello admin, would you like to see a status report?\" ) else : print ( f \"Hello { username } , thank you for loggin in again!\" ) else : print ( \"We need to find some users!\" ) Output: We need to find some users!","title":"5-9: No Users"},{"location":"solutions/chapter_5/#5-10-checking-usernames","text":"Do the following to create a program that simulates how websites ensure that everyone has a unique username. Make a list of five or more usernames called current_users . Make another list of five usernames called new_users . Make sure one or two of the new usernames are also in the current_users list. Loop through the new_users list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available. Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you\u2019ll need to make a copy of current_users containing the lowercase versions of all existing users.) checking_usernames.py current_users = [ 'eric' , 'willie' , 'admin' , 'erin' , 'Ever' ] new_users = [ 'sarah' , 'Willie' , 'PHIL' , 'ever' , 'Iona' ] current_users_lower = [ user . lower () for user in current_users ] for new_user in new_users : if new_user . lower () in current_users_lower : print ( f \"Sorry { new_user } , that name is taken.\" ) else : print ( f \"Great, { new_user } is still available.\" ) Output: Great, sarah is still available. Sorry Willie, that name is taken. Great, PHIL is still available. Sorry ever, that name is taken. Great, Iona is still available. Note If you're not comfortable with list comprehensions yet, the list current_users_lower can be generated using a loop: current_users_lower = [] for user in current_users : current_users_lower . append ( user . lower ())","title":"5-10: Checking Usernames"},{"location":"solutions/chapter_5/#5-11-ordinal-numbers","text":"Ordinal numbers indicate their position in a list, such as 1st or 2nd . Most ordinal numbers end in th , except 1, 2, and 3. Store the numbers 1 through 9 in a list. Loop through the list. Use an if-elif-else chain inside the loop to print the proper ordinal ending for each number. Your output should read \"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\" , and each result should be on a separate line. ordinal_numbers.py numbers = list ( range ( 1 , 10 )) for number in numbers : if number == 1 : print ( \"1st\" ) elif number == 2 : print ( \"2nd\" ) elif number == 3 : print ( \"3rd\" ) else : print ( f \" { number } th\" ) Output: 1st 2nd 3rd 4th 5th 6th 7th 8th 9th","title":"5-11: Ordinal Numbers"},{"location":"solutions/chapter_6/","text":"Solutions - Chapter 6 Back to solutions . 6-1: Person Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name , last_name , age , and city . Print each piece of information stored in your dictionary. person.py person = { 'first_name' : 'eric' , 'last_name' : 'matthes' , 'age' : 43 , 'city' : 'sitka' , } print ( person [ 'first_name' ]) print ( person [ 'last_name' ]) print ( person [ 'age' ]) print ( person [ 'city' ]) Output: eric matthes 43 sitka 6-2: Favorite Numbers Use a dictionary to store people's favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person's name and their favorite number. For even more fun, poll a few friends and get some actual data for your program. favorite_numbers.py favorite_numbers = { 'mandy' : 42 , 'micah' : 23 , 'gus' : 7 , 'hank' : 1_000_000 , 'maggie' : 0 , } num = favorite_numbers [ 'mandy' ] print ( f \"Mandy's favorite number is { num } .\" ) num = favorite_numbers [ 'micah' ] print ( f \"Micah's favorite number is { num } .\" ) num = favorite_numbers [ 'gus' ] print ( f \"Gus's favorite number is { num } .\" ) num = favorite_numbers [ 'hank' ] print ( f \"Hank's favorite number is { num } .\" ) num = favorite_numbers [ 'maggie' ] print ( f \"Maggie's favorite number is { num } .\" ) Output: Mandy's favorite number is 42. Micah's favorite number is 23. Gus's favorite number is 7. Hank's favorite number is 1000000. Maggie's favorite number is 0. 6-3: Glossary A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let's call it a glossary. Think of five programming words you've learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values. Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character ( '\\n' ) to insert a blank line between each word-meaning pair in your output. glossary.py glossary = { 'string' : 'A series of characters.' , 'comment' : 'A note in a program that the Python interpreter ignores.' , 'list' : 'A collection of items in a particular order.' , 'loop' : 'Work through a collection of items, one at a time.' , 'dictionary' : \"A collection of key-value pairs.\" , } word = 'string' print ( f \" \\n { word . title () } : { glossary [ word ] } \" ) word = 'comment' print ( f \" \\n { word . title () } : { glossary [ word ] } \" ) word = 'list' print ( f \" \\n { word . title () } : { glossary [ word ] } \" ) word = 'loop' print ( f \" \\n { word . title () } : { glossary [ word ] } \" ) word = 'dictionary' print ( f \" \\n { word . title () } : { glossary [ word ] } \" ) Output: String: A series of characters. Comment: A note in a program that the Python interpreter ignores. List: A collection of items in a particular order. Loop: Work through a collection of items, one at a time. Dictionary: A collection of key-value pairs. 6-4: Glossary 2 Now that you know how to loop through a dictionary, clean up the code from Exercise 6-3 (page 99) by replacing your series of print() calls with a loop that runs through the dictionary's keys and values. When you're sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output. glossary_2.py glossary = { 'string' : 'A series of characters.' , 'comment' : 'A note in a program that the Python interpreter ignores.' , 'list' : 'A collection of items in a particular order.' , 'loop' : 'Work through a collection of items, one at a time.' , 'dictionary' : \"A collection of key-value pairs.\" , 'key' : 'The first item in a key-value pair in a dictionary.' , 'value' : 'An item associated with a key in a dictionary.' , 'conditional test' : 'A comparison between two values.' , 'float' : 'A numerical value with a decimal component.' , 'boolean expression' : 'An expression that evaluates to True or False.' , } for word , definition in glossary . items (): print ( f \" \\n { word . title () } : { definition } \" ) Output: String: A series of characters. Comment: A note in a program that the Python interpreter ignores. List: A collection of items in a particular order. Loop: Work through a collection of items, one at a time. Dictionary: A collection of key-value pairs. Key: The first item in a key-value pair in a dictionary. Value: An item associated with a key in a dictionary. Conditional Test: A comparison between two values. Float: A numerical value with a decimal component. Boolean Expression: An expression that evaluates to True or False. 6-5: Rivers Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt' . Use a loop to print a sentence about each river, such as The Nile runs through Egypt. Use a loop to print the name of each river included in the dictionary. Use a loop to print the name of each country included in the dictionary. rivers.py rivers = { 'nile' : 'egypt' , 'mississippi' : 'united states' , 'fraser' : 'canada' , 'kuskokwim' : 'alaska' , 'yangtze' : 'china' , } for river , country in rivers . items (): print ( f \"The { river . title () } flows through { country . title () } .\" ) print ( \" \\n The following rivers are included in this data set:\" ) for river in rivers . keys (): print ( f \"- { river . title () } \" ) print ( \" \\n The following countries are included in this data set:\" ) for country in rivers . values (): print ( f \"- { country . title () } \" ) Output*: The Nile flows through Egypt. The Mississippi flows through United States. The Fraser flows through Canada. The Kuskokwim flows through Alaska. The Yangtze flows through China. The following rivers are included in this data set: - Nile - Mississippi - Fraser - Kuskokwim - Yangtze The following countries are included in this data set: - Egypt - United States - Canada - Alaska - China * Sometimes we like to think of Alaska as our own separate country. 6-6: Polling Use the code in favorite_languages.py (page 96). Make a list of people who should take the favorite languages poll. Include some names that are already in the dictionary and some that are not. Loop through the list of people who should take the poll. If they have already taken the poll, print a message thanking them for responding. If they have not yet taken the poll, print a message inviting them to take the poll. polling.py favorite_languages = { 'jen' : 'python' , 'sarah' : 'c' , 'edward' : 'ruby' , 'phil' : 'python' , } for name , language in favorite_languages . items (): print ( f \" { name . title () } 's favorite language is { language . title () } .\" ) print ( \" \\n \" ) coders = [ 'phil' , 'josh' , 'david' , 'becca' , 'sarah' , 'matt' , 'danielle' ] for coder in coders : if coder in favorite_languages . keys (): print ( f \"Thank you for taking the poll, { coder . title () } !\" ) else : print ( f \" { coder . title () } , what's your favorite programming language?\" ) Output: Jen's favorite language is Python. Sarah's favorite language is C. Edward's favorite language is Ruby. Phil's favorite language is Python. Thank you for taking the poll, Phil! Josh, what's your favorite programming language? David, what's your favorite programming language? Becca, what's your favorite programming language? Thank you for taking the poll, Sarah! Matt, what's your favorite programming language? Danielle, what's your favorite programming language? 6-7: People Start with the program you wrote for Exercise 6-1 (page 98). Make two new dictionaries representing different people, and store all three dictionaries in a list called people . Loop through your list of people. As you loop through the list, print everything you know about each person. people.py # Make an empty list to store people in. people = [] # Define some people, and add them to the list. person = { 'first_name' : 'eric' , 'last_name' : 'matthes' , 'age' : 46 , 'city' : 'sitka' , } people . append ( person ) person = { 'first_name' : 'lemmy' , 'last_name' : 'matthes' , 'age' : 2 , 'city' : 'sitka' , } people . append ( person ) person = { 'first_name' : 'willie' , 'last_name' : 'matthes' , 'age' : 11 , 'city' : 'sitka' , } people . append ( person ) # Display all of the information in the dictionary. for person in people : name = f \" { person [ 'first_name' ] . title () } { person [ 'last_name' ] . title () } \" age = person [ 'age' ] city = person [ 'city' ] . title () print ( f \" { name } , of { city } , is { age } years old.\" ) Output: Eric Matthes, of Sitka, is 46 years old. Lemmy Matthes, of Sitka, is 2 years old. Willie Matthes, of Sitka, is 11 years old. 6-8: Pets Make several dictionaries, where each dictionary represents a different pet. In each dictionary, include the kind of animal and the owner\u2019s name. Store these dictionaries in a list called pets . Next, loop through your list and as you do, print everything you know about each pet. pets.py # Make an empty list to store the pets in. pets = [] # Make individual pets, and store each one in the list. pet = { 'animal type' : 'python' , 'name' : 'john' , 'owner' : 'guido' , 'weight' : 43 , 'eats' : 'bugs' , } pets . append ( pet ) pet = { 'animal type' : 'chicken' , 'name' : 'clarence' , 'owner' : 'tiffany' , 'weight' : 2 , 'eats' : 'seeds' , } pets . append ( pet ) pet = { 'animal type' : 'dog' , 'name' : 'peso' , 'owner' : 'eric' , 'weight' : 37 , 'eats' : 'shoes' , } pets . append ( pet ) # Display information about each pet. for pet in pets : print ( f \" \\n Here's what I know about { pet [ 'name' ] . title () } :\" ) for key , value in pet . items (): print ( f \" \\t { key } : { value } \" ) Output: Here's what I know about John: animal type: python name: john owner: guido weight: 43 eats: bugs Here's what I know about Clarence: animal type: chicken name: clarence owner: tiffany weight: 2 eats: seeds Here's what I know about Peso: animal type: dog name: peso owner: eric weight: 37 eats: shoes 6-9: Favorite Places Make a dictionary called favorite_places . Think of three names to use as keys in the dictionary, and store one to three favorite places for each person. To make this exericse a bit more interesting, ask some friends to name a few of their favorite places. Loop through the dictionary, and print each person's name and their favorite places. favorite_places.py favorite_places = { 'eric' : [ 'bear mountain' , 'death valley' , 'tierra del fuego' ], 'erin' : [ 'hawaii' , 'iceland' ], 'willie' : [ 'mt. verstovia' , 'the playground' , 'new hampshire' ] } for name , places in favorite_places . items (): print ( f \" \\n { name . title () } likes the following places:\" ) for place in places : print ( f \"- { place . title () } \" ) Output: Eric likes the following places: - Bear Mountain - Death Valley - Tierra Del Fuego Erin likes the following places: - Hawaii - Iceland Willie likes the following places: - Mt. Verstovia - The Playground - New Hampshire 6-10: Favorite Numbers Modify your program from Exercise 6-2 (page 98) so each person can have more than one favorite number. Then print each person's name along with their favorite numbers. favorite_numbers_6_10.py favorite_numbers = { 'mandy' : [ 42 , 17 ], 'micah' : [ 42 , 39 , 56 ], 'gus' : [ 7 , 12 ], } for name , numbers in favorite_numbers . items (): print ( f \" \\n { name . title () } likes the following numbers:\" ) for number in numbers : print ( f \" { number } \" ) Output: Mandy likes the following numbers: 42 17 Micah likes the following numbers: 42 39 56 Gus likes the following numbers: 7 12 6-11: Cities Make a dictionary called cities . Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city's dictionary should be something like country , population , and fact . Print the name of each city and all of the information you have stored about it. cities.py cities = { 'santiago' : { 'country' : 'chile' , 'population' : 6_310_000 , 'nearby mountains' : 'andes' , }, 'talkeetna' : { 'country' : 'united states' , 'population' : 876 , 'nearby mountains' : 'alaska range' , }, 'kathmandu' : { 'country' : 'nepal' , 'population' : 975_453 , 'nearby mountains' : 'himilaya' , } } for city , city_info in cities . items (): country = city_info [ 'country' ] . title () population = city_info [ 'population' ] mountains = city_info [ 'nearby mountains' ] . title () print ( f \" \\n { city . title () } is in { country } .\" ) print ( f \" It has a population of about { population } .\" ) print ( f \" The { mountains } mounats are nearby.\" ) Output: Santiago is in Chile. It has a population of about 6310000. The Andes mounats are nearby. Talkeetna is in United States. It has a population of about 876. The Alaska Range mounats are nearby. Kathmandu is in Nepal. It has a population of about 975453. The Himilaya mounats are nearby.","title":"Chapter 6"},{"location":"solutions/chapter_6/#solutions-chapter-6","text":"Back to solutions .","title":"Solutions - Chapter 6"},{"location":"solutions/chapter_6/#6-1-person","text":"Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name , last_name , age , and city . Print each piece of information stored in your dictionary. person.py person = { 'first_name' : 'eric' , 'last_name' : 'matthes' , 'age' : 43 , 'city' : 'sitka' , } print ( person [ 'first_name' ]) print ( person [ 'last_name' ]) print ( person [ 'age' ]) print ( person [ 'city' ]) Output: eric matthes 43 sitka","title":"6-1: Person"},{"location":"solutions/chapter_6/#6-2-favorite-numbers","text":"Use a dictionary to store people's favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person's name and their favorite number. For even more fun, poll a few friends and get some actual data for your program. favorite_numbers.py favorite_numbers = { 'mandy' : 42 , 'micah' : 23 , 'gus' : 7 , 'hank' : 1_000_000 , 'maggie' : 0 , } num = favorite_numbers [ 'mandy' ] print ( f \"Mandy's favorite number is { num } .\" ) num = favorite_numbers [ 'micah' ] print ( f \"Micah's favorite number is { num } .\" ) num = favorite_numbers [ 'gus' ] print ( f \"Gus's favorite number is { num } .\" ) num = favorite_numbers [ 'hank' ] print ( f \"Hank's favorite number is { num } .\" ) num = favorite_numbers [ 'maggie' ] print ( f \"Maggie's favorite number is { num } .\" ) Output: Mandy's favorite number is 42. Micah's favorite number is 23. Gus's favorite number is 7. Hank's favorite number is 1000000. Maggie's favorite number is 0.","title":"6-2: Favorite Numbers"},{"location":"solutions/chapter_6/#6-3-glossary","text":"A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let's call it a glossary. Think of five programming words you've learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values. Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character ( '\\n' ) to insert a blank line between each word-meaning pair in your output. glossary.py glossary = { 'string' : 'A series of characters.' , 'comment' : 'A note in a program that the Python interpreter ignores.' , 'list' : 'A collection of items in a particular order.' , 'loop' : 'Work through a collection of items, one at a time.' , 'dictionary' : \"A collection of key-value pairs.\" , } word = 'string' print ( f \" \\n { word . title () } : { glossary [ word ] } \" ) word = 'comment' print ( f \" \\n { word . title () } : { glossary [ word ] } \" ) word = 'list' print ( f \" \\n { word . title () } : { glossary [ word ] } \" ) word = 'loop' print ( f \" \\n { word . title () } : { glossary [ word ] } \" ) word = 'dictionary' print ( f \" \\n { word . title () } : { glossary [ word ] } \" ) Output: String: A series of characters. Comment: A note in a program that the Python interpreter ignores. List: A collection of items in a particular order. Loop: Work through a collection of items, one at a time. Dictionary: A collection of key-value pairs.","title":"6-3: Glossary"},{"location":"solutions/chapter_6/#6-4-glossary-2","text":"Now that you know how to loop through a dictionary, clean up the code from Exercise 6-3 (page 99) by replacing your series of print() calls with a loop that runs through the dictionary's keys and values. When you're sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output. glossary_2.py glossary = { 'string' : 'A series of characters.' , 'comment' : 'A note in a program that the Python interpreter ignores.' , 'list' : 'A collection of items in a particular order.' , 'loop' : 'Work through a collection of items, one at a time.' , 'dictionary' : \"A collection of key-value pairs.\" , 'key' : 'The first item in a key-value pair in a dictionary.' , 'value' : 'An item associated with a key in a dictionary.' , 'conditional test' : 'A comparison between two values.' , 'float' : 'A numerical value with a decimal component.' , 'boolean expression' : 'An expression that evaluates to True or False.' , } for word , definition in glossary . items (): print ( f \" \\n { word . title () } : { definition } \" ) Output: String: A series of characters. Comment: A note in a program that the Python interpreter ignores. List: A collection of items in a particular order. Loop: Work through a collection of items, one at a time. Dictionary: A collection of key-value pairs. Key: The first item in a key-value pair in a dictionary. Value: An item associated with a key in a dictionary. Conditional Test: A comparison between two values. Float: A numerical value with a decimal component. Boolean Expression: An expression that evaluates to True or False.","title":"6-4: Glossary 2"},{"location":"solutions/chapter_6/#6-5-rivers","text":"Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt' . Use a loop to print a sentence about each river, such as The Nile runs through Egypt. Use a loop to print the name of each river included in the dictionary. Use a loop to print the name of each country included in the dictionary. rivers.py rivers = { 'nile' : 'egypt' , 'mississippi' : 'united states' , 'fraser' : 'canada' , 'kuskokwim' : 'alaska' , 'yangtze' : 'china' , } for river , country in rivers . items (): print ( f \"The { river . title () } flows through { country . title () } .\" ) print ( \" \\n The following rivers are included in this data set:\" ) for river in rivers . keys (): print ( f \"- { river . title () } \" ) print ( \" \\n The following countries are included in this data set:\" ) for country in rivers . values (): print ( f \"- { country . title () } \" ) Output*: The Nile flows through Egypt. The Mississippi flows through United States. The Fraser flows through Canada. The Kuskokwim flows through Alaska. The Yangtze flows through China. The following rivers are included in this data set: - Nile - Mississippi - Fraser - Kuskokwim - Yangtze The following countries are included in this data set: - Egypt - United States - Canada - Alaska - China * Sometimes we like to think of Alaska as our own separate country.","title":"6-5: Rivers"},{"location":"solutions/chapter_6/#6-6-polling","text":"Use the code in favorite_languages.py (page 96). Make a list of people who should take the favorite languages poll. Include some names that are already in the dictionary and some that are not. Loop through the list of people who should take the poll. If they have already taken the poll, print a message thanking them for responding. If they have not yet taken the poll, print a message inviting them to take the poll. polling.py favorite_languages = { 'jen' : 'python' , 'sarah' : 'c' , 'edward' : 'ruby' , 'phil' : 'python' , } for name , language in favorite_languages . items (): print ( f \" { name . title () } 's favorite language is { language . title () } .\" ) print ( \" \\n \" ) coders = [ 'phil' , 'josh' , 'david' , 'becca' , 'sarah' , 'matt' , 'danielle' ] for coder in coders : if coder in favorite_languages . keys (): print ( f \"Thank you for taking the poll, { coder . title () } !\" ) else : print ( f \" { coder . title () } , what's your favorite programming language?\" ) Output: Jen's favorite language is Python. Sarah's favorite language is C. Edward's favorite language is Ruby. Phil's favorite language is Python. Thank you for taking the poll, Phil! Josh, what's your favorite programming language? David, what's your favorite programming language? Becca, what's your favorite programming language? Thank you for taking the poll, Sarah! Matt, what's your favorite programming language? Danielle, what's your favorite programming language?","title":"6-6: Polling"},{"location":"solutions/chapter_6/#6-7-people","text":"Start with the program you wrote for Exercise 6-1 (page 98). Make two new dictionaries representing different people, and store all three dictionaries in a list called people . Loop through your list of people. As you loop through the list, print everything you know about each person. people.py # Make an empty list to store people in. people = [] # Define some people, and add them to the list. person = { 'first_name' : 'eric' , 'last_name' : 'matthes' , 'age' : 46 , 'city' : 'sitka' , } people . append ( person ) person = { 'first_name' : 'lemmy' , 'last_name' : 'matthes' , 'age' : 2 , 'city' : 'sitka' , } people . append ( person ) person = { 'first_name' : 'willie' , 'last_name' : 'matthes' , 'age' : 11 , 'city' : 'sitka' , } people . append ( person ) # Display all of the information in the dictionary. for person in people : name = f \" { person [ 'first_name' ] . title () } { person [ 'last_name' ] . title () } \" age = person [ 'age' ] city = person [ 'city' ] . title () print ( f \" { name } , of { city } , is { age } years old.\" ) Output: Eric Matthes, of Sitka, is 46 years old. Lemmy Matthes, of Sitka, is 2 years old. Willie Matthes, of Sitka, is 11 years old.","title":"6-7: People"},{"location":"solutions/chapter_6/#6-8-pets","text":"Make several dictionaries, where each dictionary represents a different pet. In each dictionary, include the kind of animal and the owner\u2019s name. Store these dictionaries in a list called pets . Next, loop through your list and as you do, print everything you know about each pet. pets.py # Make an empty list to store the pets in. pets = [] # Make individual pets, and store each one in the list. pet = { 'animal type' : 'python' , 'name' : 'john' , 'owner' : 'guido' , 'weight' : 43 , 'eats' : 'bugs' , } pets . append ( pet ) pet = { 'animal type' : 'chicken' , 'name' : 'clarence' , 'owner' : 'tiffany' , 'weight' : 2 , 'eats' : 'seeds' , } pets . append ( pet ) pet = { 'animal type' : 'dog' , 'name' : 'peso' , 'owner' : 'eric' , 'weight' : 37 , 'eats' : 'shoes' , } pets . append ( pet ) # Display information about each pet. for pet in pets : print ( f \" \\n Here's what I know about { pet [ 'name' ] . title () } :\" ) for key , value in pet . items (): print ( f \" \\t { key } : { value } \" ) Output: Here's what I know about John: animal type: python name: john owner: guido weight: 43 eats: bugs Here's what I know about Clarence: animal type: chicken name: clarence owner: tiffany weight: 2 eats: seeds Here's what I know about Peso: animal type: dog name: peso owner: eric weight: 37 eats: shoes","title":"6-8: Pets"},{"location":"solutions/chapter_6/#6-9-favorite-places","text":"Make a dictionary called favorite_places . Think of three names to use as keys in the dictionary, and store one to three favorite places for each person. To make this exericse a bit more interesting, ask some friends to name a few of their favorite places. Loop through the dictionary, and print each person's name and their favorite places. favorite_places.py favorite_places = { 'eric' : [ 'bear mountain' , 'death valley' , 'tierra del fuego' ], 'erin' : [ 'hawaii' , 'iceland' ], 'willie' : [ 'mt. verstovia' , 'the playground' , 'new hampshire' ] } for name , places in favorite_places . items (): print ( f \" \\n { name . title () } likes the following places:\" ) for place in places : print ( f \"- { place . title () } \" ) Output: Eric likes the following places: - Bear Mountain - Death Valley - Tierra Del Fuego Erin likes the following places: - Hawaii - Iceland Willie likes the following places: - Mt. Verstovia - The Playground - New Hampshire","title":"6-9: Favorite Places"},{"location":"solutions/chapter_6/#6-10-favorite-numbers","text":"Modify your program from Exercise 6-2 (page 98) so each person can have more than one favorite number. Then print each person's name along with their favorite numbers. favorite_numbers_6_10.py favorite_numbers = { 'mandy' : [ 42 , 17 ], 'micah' : [ 42 , 39 , 56 ], 'gus' : [ 7 , 12 ], } for name , numbers in favorite_numbers . items (): print ( f \" \\n { name . title () } likes the following numbers:\" ) for number in numbers : print ( f \" { number } \" ) Output: Mandy likes the following numbers: 42 17 Micah likes the following numbers: 42 39 56 Gus likes the following numbers: 7 12","title":"6-10: Favorite Numbers"},{"location":"solutions/chapter_6/#6-11-cities","text":"Make a dictionary called cities . Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city's dictionary should be something like country , population , and fact . Print the name of each city and all of the information you have stored about it. cities.py cities = { 'santiago' : { 'country' : 'chile' , 'population' : 6_310_000 , 'nearby mountains' : 'andes' , }, 'talkeetna' : { 'country' : 'united states' , 'population' : 876 , 'nearby mountains' : 'alaska range' , }, 'kathmandu' : { 'country' : 'nepal' , 'population' : 975_453 , 'nearby mountains' : 'himilaya' , } } for city , city_info in cities . items (): country = city_info [ 'country' ] . title () population = city_info [ 'population' ] mountains = city_info [ 'nearby mountains' ] . title () print ( f \" \\n { city . title () } is in { country } .\" ) print ( f \" It has a population of about { population } .\" ) print ( f \" The { mountains } mounats are nearby.\" ) Output: Santiago is in Chile. It has a population of about 6310000. The Andes mounats are nearby. Talkeetna is in United States. It has a population of about 876. The Alaska Range mounats are nearby. Kathmandu is in Nepal. It has a population of about 975453. The Himilaya mounats are nearby.","title":"6-11: Cities"},{"location":"solutions/chapter_7/","text":"Solutions - Chapter 7 Back to solutions . Note: VS Code isn't always set up to run programs that prompt the user for input. If you're having trouble entering user input with VS Code, see Running programs that use input() for help. 7-1: Rental Car Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as \"Let me see if I can find you a Subaru\". rental_car.py car = input ( \"What kind of car would you like? \" ) print ( f \"Let me see if I can find you a { car . title () } .\" ) Output: What kind of car would you like? Toyota Tacoma Let me see if I can find you a Toyota Tacoma. 7-2: Restaurant Seating Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they'll have to wait for a table. Otherwise, report that their table is ready. restaurant_seating.py party_size = input ( \"How many people are in your dinner party tonight? \" ) party_size = int ( party_size ) if party_size > 8 : print ( \"I'm sorry, you'll have to wait for a table.\" ) else : print ( \"Your table is ready.\" ) Output: How many people are in your dinner party tonight? 12 I'm sorry, you'll have to wait for a table. or: How many people are in your dinner party tonight? 6 Your table is ready. 7-3: Multiples of Ten Ask the user for a number, and then report whether the number is a multiple of 10 or not. multiples_of_ten.py number = input ( \"Give me a number, please: \" ) number = int ( number ) if number % 10 == 0 : print ( f \" { number } is a multiple of 10.\" ) else : print ( f \" { number } is not a multiple of 10.\" ) Output: Give me a number, please: 23 23 is not a multiple of 10. or: Give me a number, please: 90 90 is a multiple of 10. 7-4: Pizza Toppings Write a loop that prompts the user to enter a series of pizza toppings until they enter a quit value. As they enter each topping, print a message saying you'll add that topping to their pizza. pizza_toppings.py prompt = \" \\n What topping would you like on your pizza?\" prompt += \" \\n Enter 'quit' when you are finished: \" while True : topping = input ( prompt ) if topping != 'quit' : print ( f \" I'll add { topping } to your pizza.\" ) else : break Output: What topping would you like on your pizza? Enter 'quit' when you are finished: pepperoni I'll add pepperoni to your pizza. What topping would you like on your pizza? Enter 'quit' when you are finished: sausage I'll add sausage to your pizza. What topping would you like on your pizza? Enter 'quit' when you are finished: bacon I'll add bacon to your pizza. What topping would you like on your pizza? Enter 'quit' when you are finished: quit 7-5: Movie Tickets A movie theater charges different ticket prices depending on a person's age. If a person is under the age of 3, the ticket is free; if they are between 3 and 12, the ticket is $10; and if they are over age 12, the ticket is $15. Write a loop in which you ask users their age, and then tell them the cost of their movie ticket. movie_tickets.py prompt = \" \\n How old are you?\" prompt += \" \\n Enter 'quit' when you are finished. \" while True : age = input ( prompt ) if age == 'quit' : break age = int ( age ) if age < 3 : print ( \" You get in free!\" ) elif age < 13 : print ( \" Your ticket is $10.\" ) else : print ( \" Your ticket is $15.\" ) Output: How old are you? Enter 'quit' when you are finished. 2 You get in free! How old are you? Enter 'quit' when you are finished. 3 Your ticket is $10. How old are you? Enter 'quit' when you are finished. 12 Your ticket is $10. How old are you? Enter 'quit' when you are finished. 18 Your ticket is $15. How old are you? Enter 'quit' when you are finished. quit 7-8: Deli Make a list called sandwich_orders and fill it with the names of various sandwiches. Then make an empty list called finished_sandwiches . Loop through the list of sandwich orders and print a message for each order, such as I made your tuna sandwich. As each sandwich is made, move it to the list of finished sandwiches. After all the sandwiches have been made, print a message listing each sandwich that was made. deli.py sandwich_orders = [ 'veggie' , 'grilled cheese' , 'turkey' , 'roast beef' ] finished_sandwiches = [] while sandwich_orders : current_sandwich = sandwich_orders . pop () print ( f \"I'm working on your { current_sandwich } sandwich.\" ) finished_sandwiches . append ( current_sandwich ) print ( \" \\n \" ) for sandwich in finished_sandwiches : print ( f \"I made a { sandwich } sandwich.\" ) Output: I'm working on your roast beef sandwich. I'm working on your turkey sandwich. I'm working on your grilled cheese sandwich. I'm working on your veggie sandwich. I made a roast beef sandwich. I made a turkey sandwich. I made a grilled cheese sandwich. I made a veggie sandwich. 7-9: No Pastrami Using the list sandwich_orders from Exercise 7-8, make sure the sandwich 'pastrami' appears in the list at least three times. Add code near the beginning of your program to print a message saying the deli has run out of pastrami, and then use a while loop to remove all occurences of 'pastrami' from sandwich_orders . Make sure no pastrami sandwiches end up in finished_sandiches . no_pastrami.py sandwich_orders = [ 'pastrami' , 'veggie' , 'grilled cheese' , 'pastrami' , 'turkey' , 'roast beef' , 'pastrami' ] finished_sandwiches = [] print ( \"I'm sorry, we're all out of pastrami today.\" ) while 'pastrami' in sandwich_orders : sandwich_orders . remove ( 'pastrami' ) print ( \" \\n \" ) while sandwich_orders : current_sandwich = sandwich_orders . pop () print ( f \"I'm working on your { current_sandwich } sandwich.\" ) finished_sandwiches . append ( current_sandwich ) print ( \" \\n \" ) for sandwich in finished_sandwiches : print ( f \"I made a { sandwich } sandwich.\" ) Output: I'm sorry, we're all out of pastrami today. I'm working on your roast beef sandwich. I'm working on your turkey sandwich. I'm working on your grilled cheese sandwich. I'm working on your veggie sandwich. I made a roast beef sandwich. I made a turkey sandwich. I made a grilled cheese sandwich. I made a veggie sandwich. 7-10: Dream Vacation Write a program that polls users about their dream vacation. Write a prompt similar to If you could visit one place in the world, where would you go? Include a block of code that prints the results of the poll. dream_vacation.py name_prompt = \" \\n What's your name? \" place_prompt = \"If you could visit one place in the world, where would it be? \" continue_prompt = \" \\n Would you like to let someone else respond? (yes/no) \" # Responses will be stored in the form {name: place}. responses = {} while True : # Ask the user where they'd like to go. name = input ( name_prompt ) place = input ( place_prompt ) # Store the response. responses [ name ] = place # Ask if there's anyone else responding. repeat = input ( continue_prompt ) if repeat != 'yes' : break # Show results of the survey. print ( \" \\n --- Results ---\" ) for name , place in responses . items (): print ( f \" { name . title () } would like to visit { place . title () } .\" ) Output: What's your name? eric If you could visit one place in the world, where would it be? china Would you like to let someone else respond? (yes/no) yes What's your name? erin If you could visit one place in the world, where would it be? iceland Would you like to let someone else respond? (yes/no) yes What's your name? ever If you could visit one place in the world, where would it be? japan Would you like to let someone else respond? (yes/no) --- Results --- Eric would like to visit China. Erin would like to visit Iceland. Ever would like to visit Japan.","title":"Chapter 7"},{"location":"solutions/chapter_7/#solutions-chapter-7","text":"Back to solutions . Note: VS Code isn't always set up to run programs that prompt the user for input. If you're having trouble entering user input with VS Code, see Running programs that use input() for help.","title":"Solutions - Chapter 7"},{"location":"solutions/chapter_7/#7-1-rental-car","text":"Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as \"Let me see if I can find you a Subaru\". rental_car.py car = input ( \"What kind of car would you like? \" ) print ( f \"Let me see if I can find you a { car . title () } .\" ) Output: What kind of car would you like? Toyota Tacoma Let me see if I can find you a Toyota Tacoma.","title":"7-1: Rental Car"},{"location":"solutions/chapter_7/#7-2-restaurant-seating","text":"Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they'll have to wait for a table. Otherwise, report that their table is ready. restaurant_seating.py party_size = input ( \"How many people are in your dinner party tonight? \" ) party_size = int ( party_size ) if party_size > 8 : print ( \"I'm sorry, you'll have to wait for a table.\" ) else : print ( \"Your table is ready.\" ) Output: How many people are in your dinner party tonight? 12 I'm sorry, you'll have to wait for a table. or: How many people are in your dinner party tonight? 6 Your table is ready.","title":"7-2: Restaurant Seating"},{"location":"solutions/chapter_7/#7-3-multiples-of-ten","text":"Ask the user for a number, and then report whether the number is a multiple of 10 or not. multiples_of_ten.py number = input ( \"Give me a number, please: \" ) number = int ( number ) if number % 10 == 0 : print ( f \" { number } is a multiple of 10.\" ) else : print ( f \" { number } is not a multiple of 10.\" ) Output: Give me a number, please: 23 23 is not a multiple of 10. or: Give me a number, please: 90 90 is a multiple of 10.","title":"7-3: Multiples of Ten"},{"location":"solutions/chapter_7/#7-4-pizza-toppings","text":"Write a loop that prompts the user to enter a series of pizza toppings until they enter a quit value. As they enter each topping, print a message saying you'll add that topping to their pizza. pizza_toppings.py prompt = \" \\n What topping would you like on your pizza?\" prompt += \" \\n Enter 'quit' when you are finished: \" while True : topping = input ( prompt ) if topping != 'quit' : print ( f \" I'll add { topping } to your pizza.\" ) else : break Output: What topping would you like on your pizza? Enter 'quit' when you are finished: pepperoni I'll add pepperoni to your pizza. What topping would you like on your pizza? Enter 'quit' when you are finished: sausage I'll add sausage to your pizza. What topping would you like on your pizza? Enter 'quit' when you are finished: bacon I'll add bacon to your pizza. What topping would you like on your pizza? Enter 'quit' when you are finished: quit","title":"7-4: Pizza Toppings"},{"location":"solutions/chapter_7/#7-5-movie-tickets","text":"A movie theater charges different ticket prices depending on a person's age. If a person is under the age of 3, the ticket is free; if they are between 3 and 12, the ticket is $10; and if they are over age 12, the ticket is $15. Write a loop in which you ask users their age, and then tell them the cost of their movie ticket. movie_tickets.py prompt = \" \\n How old are you?\" prompt += \" \\n Enter 'quit' when you are finished. \" while True : age = input ( prompt ) if age == 'quit' : break age = int ( age ) if age < 3 : print ( \" You get in free!\" ) elif age < 13 : print ( \" Your ticket is $10.\" ) else : print ( \" Your ticket is $15.\" ) Output: How old are you? Enter 'quit' when you are finished. 2 You get in free! How old are you? Enter 'quit' when you are finished. 3 Your ticket is $10. How old are you? Enter 'quit' when you are finished. 12 Your ticket is $10. How old are you? Enter 'quit' when you are finished. 18 Your ticket is $15. How old are you? Enter 'quit' when you are finished. quit","title":"7-5: Movie Tickets"},{"location":"solutions/chapter_7/#7-8-deli","text":"Make a list called sandwich_orders and fill it with the names of various sandwiches. Then make an empty list called finished_sandwiches . Loop through the list of sandwich orders and print a message for each order, such as I made your tuna sandwich. As each sandwich is made, move it to the list of finished sandwiches. After all the sandwiches have been made, print a message listing each sandwich that was made. deli.py sandwich_orders = [ 'veggie' , 'grilled cheese' , 'turkey' , 'roast beef' ] finished_sandwiches = [] while sandwich_orders : current_sandwich = sandwich_orders . pop () print ( f \"I'm working on your { current_sandwich } sandwich.\" ) finished_sandwiches . append ( current_sandwich ) print ( \" \\n \" ) for sandwich in finished_sandwiches : print ( f \"I made a { sandwich } sandwich.\" ) Output: I'm working on your roast beef sandwich. I'm working on your turkey sandwich. I'm working on your grilled cheese sandwich. I'm working on your veggie sandwich. I made a roast beef sandwich. I made a turkey sandwich. I made a grilled cheese sandwich. I made a veggie sandwich.","title":"7-8: Deli"},{"location":"solutions/chapter_7/#7-9-no-pastrami","text":"Using the list sandwich_orders from Exercise 7-8, make sure the sandwich 'pastrami' appears in the list at least three times. Add code near the beginning of your program to print a message saying the deli has run out of pastrami, and then use a while loop to remove all occurences of 'pastrami' from sandwich_orders . Make sure no pastrami sandwiches end up in finished_sandiches . no_pastrami.py sandwich_orders = [ 'pastrami' , 'veggie' , 'grilled cheese' , 'pastrami' , 'turkey' , 'roast beef' , 'pastrami' ] finished_sandwiches = [] print ( \"I'm sorry, we're all out of pastrami today.\" ) while 'pastrami' in sandwich_orders : sandwich_orders . remove ( 'pastrami' ) print ( \" \\n \" ) while sandwich_orders : current_sandwich = sandwich_orders . pop () print ( f \"I'm working on your { current_sandwich } sandwich.\" ) finished_sandwiches . append ( current_sandwich ) print ( \" \\n \" ) for sandwich in finished_sandwiches : print ( f \"I made a { sandwich } sandwich.\" ) Output: I'm sorry, we're all out of pastrami today. I'm working on your roast beef sandwich. I'm working on your turkey sandwich. I'm working on your grilled cheese sandwich. I'm working on your veggie sandwich. I made a roast beef sandwich. I made a turkey sandwich. I made a grilled cheese sandwich. I made a veggie sandwich.","title":"7-9: No Pastrami"},{"location":"solutions/chapter_7/#7-10-dream-vacation","text":"Write a program that polls users about their dream vacation. Write a prompt similar to If you could visit one place in the world, where would you go? Include a block of code that prints the results of the poll. dream_vacation.py name_prompt = \" \\n What's your name? \" place_prompt = \"If you could visit one place in the world, where would it be? \" continue_prompt = \" \\n Would you like to let someone else respond? (yes/no) \" # Responses will be stored in the form {name: place}. responses = {} while True : # Ask the user where they'd like to go. name = input ( name_prompt ) place = input ( place_prompt ) # Store the response. responses [ name ] = place # Ask if there's anyone else responding. repeat = input ( continue_prompt ) if repeat != 'yes' : break # Show results of the survey. print ( \" \\n --- Results ---\" ) for name , place in responses . items (): print ( f \" { name . title () } would like to visit { place . title () } .\" ) Output: What's your name? eric If you could visit one place in the world, where would it be? china Would you like to let someone else respond? (yes/no) yes What's your name? erin If you could visit one place in the world, where would it be? iceland Would you like to let someone else respond? (yes/no) yes What's your name? ever If you could visit one place in the world, where would it be? japan Would you like to let someone else respond? (yes/no) --- Results --- Eric would like to visit China. Erin would like to visit Iceland. Ever would like to visit Japan.","title":"7-10: Dream Vacation"}]}